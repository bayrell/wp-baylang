/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseObject;
use Runtime.Math;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.QueryField;
use Runtime.ORM.QueryResult;
use Runtime.ORM.Relation;


class Cursor extends BaseObject
{
	Connection conn = null;
	Query q = null;
	
	
	/**
	 * Constructor
	 */
	public void constructor(Connection conn)
	{
		parent();
		this.conn = conn;
	}
	
	
	/**
	 * Returns found rows
	 */
	async int foundRows() => 0;
	
	
	/**
	 * Returns affected rows
	 */
	async int affectedRows() => 0;
	
	
	/**
	 * Returns last insert id
	 */
	async int lastInsertId() => 0;
	
	
	/**
	 * Returns pages
	 */
	async int getPages()
	{
		int rows = await this.foundRows();
		return this.q ? this.q.getPages(rows) : 0;
	}
	
	
	/**
	 * Returns page
	 */
	async int getPage() => this.q ? this.q.getPage() : 0;
	
	
	/**
	 * Close query
	 */
	async void close()
	{
	}
	
	
	/**
	 * Fetch next row
	 */
	async Dict fetchMap() => null;
	
	
	/**
	 * Convert item
	 */
	Dict convertItem(Dict item)
	{
		Vector fields = this.q._fields;
		for (int i=0; i<fields.count(); i++)
		{
			var field = fields[i];
			if (field instanceof QueryField and field.annotation)
			{
				item = field.annotation.fromDatabase(this.conn, item);
			}
		}
		
		return item;
	}
	
	
	/**
	 * Fetch next row
	 */
	async Dict fetch()
	{
		Dict row = await this.fetchMap();
		if (!row) return null;
		row = this.convertItem(row);
		return row;
	}
	
	
	/**
	 * Fetch next row
	 */
	async Relation fetchRelation()
	{
		Relation row = await this.fetch();
		if (!row) return null;
		
		string table_name = this.q._table_name;
		return Relation::newInstance(table_name, row);
	}
	
	
	/**
	 * Fetch all rows
	 */
	async QueryResult fetchAll()
	{
		string table_name = this.q._table_name;
		QueryResult items = new QueryResult();
		
		/* Copy settings */
		items.conn = this.conn;
		items.q = this.q ? this.q.copy() : null;
		
		/* Get rows */
		items.rows = await this.foundRows();
		
		/* Get items */
		while (true)
		{
			Dict row = await this.fetch();
			if (row == null)
			{
				break;
			}
			items.append(row);
		}
		
		return items;
	}
	
	
	/**
	 * Fetch variable
	 */
	async var fetchVar(string var_name)
	{
		Dict row = await this.fetchMap();
		if (row)
		{
			return row[var_name];
		}
		return null;
	}
}