/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseObject;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Annotations.BaseType;
use Runtime.ORM.Provider;


class QueryField extends BaseObject
{
	BaseType annotation = null;
	string table_name = "";
	string field_name = "";
	string alias_name = "";
	
	
	/**
	 * Returns row column name
	 */
	string getRowColumnName()
	{
		if (this.alias_name != "") return this.alias_name;
		return this.field_name;
	}
	
	
	/**
	 * Create from field name
	 */
	void constructor(
		string table_name = "",
		string field_name = "",
		string alias_name = ""
	)
	{
		table_name = rs::trim(table_name);
		field_name = rs::trim(field_name);
		table_name = rs::trim(table_name);
		
		if (table_name and field_name)
		{
			Provider provider = @.provider(classof Provider);
			this.annotation = provider.getFieldType(table_name, field_name);
		}
		
		this.alias_name = alias_name;
		this.field_name = field_name;
		this.table_name = table_name;
	}
	
	
	/**
	 * Create from string
	 */
	static QueryField fromString(string s)
	{
		Collection res1 = rs::split(" as ", s);
		Collection res2 = rs::split(".", res1[0]);
		
		string alias_name = res1.count() > 1 ? res1.get(1) : "";
		string field_name = res2.count() == 0 ? res2.get(0) : res2.get(1);
		string table_name = res2.count() > 1 ? res2.get(0) : "";
		
		return new QueryField(table_name, field_name, alias_name);
	}
}