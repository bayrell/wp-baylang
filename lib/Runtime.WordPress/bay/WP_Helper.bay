/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.WordPress;

use Runtime.lib;
use Runtime.RawString;
use Runtime.Web.BaseApp;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderResponse;
use Runtime.Web.RouteInfo;
use Runtime.Web.RouteList;
use Runtime.WordPress.Admin.AdminUI;


class WP_Helper
{
	#ifdef BACKEND then
	
	/**
	 * Returns option by name
	 */
	static string get_option(string name, string value = "")
	{
		#ifcode PHP then
		if ( ! is_multisite() )
		{
			return \get_option($name, $value);
		}
		return \get_blog_option(null, $name, $value);
		#endif
	}
	
	
	/**
	 * Update option by name
	 */
	static string update_option(string name, string value)
	{
		#ifcode PHP then
		if ( ! is_multisite() )
		{
			if (!add_option($name, $value, "", "no"))
			{
				\update_option($name, $value);
			}
		}
		else
		{
			if (!add_blog_option(null, $name, $value, "", "no"))
			{
				\update_blog_option(null, $name, $value);
			}
		}
		#endif
	}
	
	
	/**
	 * Check wp nonce
	 */
	static bool check_wp_nonce(string nonce_action)
	{
		#ifcode PHP then
		
		/* Check nonce */
		$nonce = isset($_REQUEST['nonce']) ? $_REQUEST['nonce'] : false;
		if ($nonce == false)
		{
			return false;
		}
		if (!wp_verify_nonce($nonce, $nonce_action))
		{
			return false;
		}
		return true;
		
		#endif
	}
	
	
	/**
	 * Call backend function
	 */
	static fn call(string name)
	{
		#ifcode PHP then
		
		$args = func_get_args();
		array_shift($args);
		
		return call_user_func_array($name, $args);
		
		#endif
	}
	
	
	/**
	 * Call backend function
	 */
	static fn wp_call(string name)
	{
		#ifcode PHP then
		
		ob_start();
		$args = func_get_args();
		array_shift($args);
		
		call_user_func_array($name, $args);
		$content = ob_get_contents();
		ob_end_clean();
		
		return $content;
		
		#endif
	}
	
	
	/**
	 * Call wp admin route
	 */
	async static string wp_admin_route(string route_name, fn route_before = null)
	{
		string content = "";
		
		/* Create render container */
		BaseApp app = @.getApp();
		RenderContainer container = app.createRenderContainer();
		
		/* Create request */
		container.request = app.createRequest();
		
		/* Setup route */
		RouteList routes = @.provider(classof RouteList);
		RouteInfo route = routes.routes_list.findItem(lib::equalAttr("name", route_name));
		container.route = route;
		
		/* Create layout */
		string layout_name = container.getLayoutName();
		await container.createLayout(layout_name);
		
		/* Call route before */
		if (route_before)
		{
			await rtl::apply(route_before, [container]);
		}
		
		/* Resolve route */
		await container.resolveRoute();
		
		/* Return container */
		return container;
	}
	
	
	/**
	 * Render
	 */
	async static string wp_render(RenderContainer container)
	{
		string content = "";
		
		if (
			container.response instanceof RenderResponse and
			container.response.content == null
		)
		{
			/* Create component */
			AdminUI component = rtl::newInstance(classof AdminUI);
			component.container = container;
			component.layout = container.layout;
			component.model = container.layout;
			
			/* Render component */
			content = RawString::normalize(component.render());
		}
		
		else if (container.response != null)
		{
			content = container.response.content;
		}
		
		else
		{
			content = "<p>404 Response not found</p>";
		}
		
		return content;
	}
	
	
	/**
	 * Render page
	 */
	async static void wp_render_page(string route_name, fn route_before = null)
	{
		RenderContainer container = static::wp_admin_route(route_name, route_before);
		string content = static::wp_render(container);
		
		#ifcode PHP then
		do_action("baylang_admin_render_page");
		echo $content;
		#endif
	}
	
	
	#endif
}