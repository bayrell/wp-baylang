/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.WordPress.Api;

use Runtime.re;
use Runtime.DateTime;
use Runtime.ORM.Connection;
use Runtime.ORM.Cursor;
use Runtime.ORM.Query;
use Runtime.ORM.QueryField;
use Runtime.ORM.QueryFilter;
use Runtime.ORM.QueryResult;
use Runtime.ORM.Relation;
use Runtime.Web.BaseApi;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.CrudRule;


class TermApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "runtime.wordpress.term";
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "terms";
	
	
	/**
	 * Returns max limit
	 */
	int getMaxLimit() => -1;
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() => [
		"term_id",
		"name",
		"slug",
		"taxonomy",
		"parent_id",
		"count",
	];
	
	
	/**
	 * Returns query field
	 */
	bool getQueryField(string field_name)
	{
		if (field_name == "parent_id")
		{
			return new QueryField("term_taxonomy", "parent", field_name);
		}
		if (
			field_name == "taxonomy" or
			field_name == "count"
		)
		{
			return new QueryField("term_taxonomy", field_name);
		}
		return new QueryField("terms", field_name);
	}
	
	
	/**
	 * Build search query
	 */
	async void buildSearchQuery(Query q)
	{
		string taxonomy_name = this.post_data.get("taxonomy", "category");
		
		q.where("term_taxonomy.taxonomy", "=", taxonomy_name);
		q.innerJoin("term_taxonomy", ["term_taxonomy.term_id = terms.term_id"]);
		q.orderBy("terms.name", "asc");
		
		/* Set term id */
		if (this.post_data.has("term_id"))
		{
			int term_id = (int)this.post_data.get("term_id");
			q.where("terms.ID", "=", term_id);
			q.calcFoundRows(false);
		}
		
		/* Set slug */
		if (this.post_data.has("slug"))
		{
			string slug = this.post_data.get("slug");
			q.where("terms.slug", "=", slug);
		}
	}
	
	
	/**
	 * Convert item
	 */
	Map convertItem(Collection fields, Relation item)
	{
		item.set("count", (int)item.get("count"));
		item.set("parent_id", (int)item.get("parent_id"));
		item.set("term_id", (int)item.get("term_id"));
		return parent(fields, item);
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		await parent();
	}
	
	
	/**
	 * Action search one
	 */
	@ApiMethod
	async void actionSearchOne()
	{
		await parent();
	}
}