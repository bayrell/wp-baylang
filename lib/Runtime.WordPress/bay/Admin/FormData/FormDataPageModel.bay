/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.WordPress.Admin.FormData;

use Runtime.lib;
use Runtime.Entity.Factory;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Input;
use Runtime.Widget.Label;
use Runtime.Widget.RowButtonsModel;
use Runtime.Widget.TextArea;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.SaveDialogModel;
use Runtime.Widget.Table.TableDialogModel;
use Runtime.Widget.Table.TableRowButtonsModel;
use Runtime.WordPress.Admin.FormData.FormDataPage;


class FormDataPageModel extends BasePageModel
{
	string component = classof FormDataPage;
	FormModel form = null;
	TableDialogModel table = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Calculate data */
		fn calculateData = var (Dict data)
		{
			Dict item = data.get("item");
			if (item.get("data") == null) return "";
			Collection items = item.get("data")
				.transition(
					string (string value, string key)
					{
						return key ~ ": " ~ value;
					}
				)
			;
			if (data.has("table")) return items;
			return rs::join("\n", items);
		};
		
		
		/* Add form */
		this.form = this.addWidget(
			classof FormModel,
			{
				"widget_name": "form",
				"primary_key": ["id"],
				"fields":
				[
					{
						"name": "form_title",
						"label": "Title",
						"component": classof Input,
						"props": {
							"readonly": true,
						}
					},
					{
						"name": "data",
						"label": "Data",
						"component": classof TextArea,
						"calculate": calculateData,
						"props": {
							"readonly": true,
						}
					},
					{
						"name": "gmtime_add",
						"label": "Data",
						"component": classof Input,
						"calculate": lib::pipe()
							.add(lib::attr(["item", "gmtime_add"]))
							.add(lib::normalizeDateTime())
						,
						"props": {
							"readonly": true,
						}
					},
				],
			}
		);
		
		/* Add table */
		this.table = this.addWidget(
			classof TableDialogModel,
			{
				"widget_name": "table",
				"styles": ["border"],
				
				/* Table storage */
				"storage": new Factory
				(
					"Runtime.Widget.Table.TableStorage",
					{
						"api_name": "admin.wordpress.forms.data::search",
					}
				),
				
				/* Set page */
				"page": this.layout.request_query.get("p", 1) - 1,
				"pagination_props":
				{
					"name": "p",
				},
				
				/* Form */
				"edit_form": this.form,
				
				/* Table fields */
				"fields":
				[
					{
						"name": "row_number",
					},
					{
						"name": "form_title",
						"label": "Title",
						"component": classof Label,
					},
					{
						"name": "data",
						"label": "Data",
						"calculate": calculateData,
						"component": classof Label,
					},
					{
						"name": "send_email_error",
						"label": "Mail error",
						"component": classof Label,
					},
					{
						"name": "gmtime_add",
						"label": "Date",
						"calculate": lib::pipe()
							.add(lib::attr(["item", "gmtime_add"]))
							.add(lib::normalizeDateTime())
						,
						"component": classof Label,
					},
					{
						"name": "row_buttons",
						"model": new ModelFactory(
							"Runtime.Widget.Table.TableRowButtonsModel",
							{
								"delete": false,
							}
						),
					},
				],
			}
		);
		
		/* Remove save button */
		SaveDialogModel save_dialog = this.table.getWidget("save_dialog");
		save_dialog.buttons.removeItemByName("confirm_button");
		
		/* Change cancel button text */
		ButtonModel cancel_button = save_dialog.buttons.findItemByName("cancel_button");
		cancel_button.content = "Close";
		
		/* Table row buttons */
		TableRowButtonsModel row_buttons = this.table.getWidget("row_buttons");
		ButtonModel edit_button = row_buttons.findItemByName("edit_button");
		edit_button.content = "View";
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle("Forms data");
	}
}