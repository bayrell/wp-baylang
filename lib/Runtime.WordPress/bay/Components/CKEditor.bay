<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.WordPress.Components.CKEditor">

<use name="Runtime.Web.Messages.ValueChangeMessage" />


<style>
.widget_ckeditor{
	min-height: 430px;
}
.widget_ckeditor *{
	box-sizing: content-box !important;
}
</style>


<template>
	<div class="widget_ckeditor">
		<textarea style='display: none;' @ref="textarea" name={{ this.name }} />
	</div>
</template>


<script>

props string name = "";
props string value = "";
var change_timer = null;
var old_value = null;
var instance = null;
bool is_instance_created = false;


/**
 * Component mounted
 */
void onMounted()
{
	#ifcode JAVASCRIPT then
	this.nextTick(() => {
		
		var conf = JSON.parse(JSON.stringify( ckeditorSettings.configuration ));
		conf["customConfig"] = "/wp-content/plugins/ckeditor-for-wordpress/ckeditor.config.small.js";
		
		this.instance = CKEDITOR.replace(this.getRef("textarea"), conf);
		this.instance.on('change', ()=>{ 
			if (this.change_timer == null)
			{
				this.change_timer = setTimeout(this.onContentChange.bind(this), 200);
			}
		});
		
		/* Set data */
		this.instance.setData(this.value);
		this.old_value = this.value;
		
		/* Set created */
		this.is_instance_created = true;
	});
	#endif
}


/**
 * On code changed
 */
public void onContentChange()
{
	this.change_timer = null;
	string value = this.instance.getData();
	this.old_value = value;
	this.value = value;
	
	/* Send value change */
	this.emit("valueChange", new ValueChangeMessage{
		"value": value,
		"old_value": this.value,
		"data": this.data,
	});
}


/**
 * On updated
 */
void onUpdated()
{
	if (this.is_instance_created and this.old_value != this.value)
	{
		#ifcode JAVASCRIPT then
		this.instance.setData(this.value);
		#endif
	}
}

</script>

</class>