/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Unit;

use Runtime.Entity;


class AssertHelper
{
	/**
	 * Check equals of types
	 */
	static void equalValueType(var value1, var value2, string message)
	{
		string type1 = rtl::getType(value1);
		string type2 = rtl::getType(value2);
		rtl::assert(type1 == type2, message);
	}
	
	
	/**
	 * Check equals of values
	 */
	static void equalValue(var value1, var value2, string message)
	{
		static::equalValueType(value1, value2, message);
		
		string value_type1 = rtl::getType(value1);
		string value_type2 = rtl::getType(value2);
		
		rtl::assert(value_type1 == value_type2, message);
		
		if (rtl::isScalarValue(value1))
		{
			rtl::assert(value1 === value2, message);
			return;
		}
		
		if (value_type1 == "collection")
		{
			static::equalCollection(value1, value2, message);
			return;
		}
		
		if (value_type1 == "dict")
		{
			static::equalDict(value1, value2, message);
			return;
		}
		
		rtl::assert(false, message);
	}
	
	
	/**
	 * Check equals of two collections
	 */
	static void equalCollection(Collection c1, Collection c2, string message)
	{
		if (c1.count() != c2.count())
		{
			rtl::assert(false, message);
		}
		
		for (int i=0; i<c1.count(); i++)
		{
			var value1 = c1.get(i);
			var value2 = c2.get(i);
			
			static::equalValue(value1, value2, message);
		}
	}
	
	
	/**
	 * Check equals of two dicts
	 */
	static void equalDict(Dict d1, Dict d2, string message)
	{
		Collection d1_keys = d1.keys();
		Collection d2_keys = d2.keys();
		
		for (int i=0; i<d1_keys.count(); i++)
		{
			string key1 = d1_keys.get(i);
			
			if (not d2.has(key1))
			{
				rtl::assert(false, message);
			}
			
			var value1 = d1.get(key1);
			var value2 = d2.get(key1);
			
			static::equalValue(value1, value2, message);
		}
		
		for (int i=0; i<d2_keys.count(); i++)
		{
			string key2 = d2_keys.get(i);
			
			if (not d1.has(key2))
			{
				rtl::assert(false, message);
			}
		}
	}
}