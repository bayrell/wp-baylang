/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Unit;

use Runtime.io;
use Runtime.lib;
use Runtime.BaseProvider;
use Runtime.BaseStruct;
use Runtime.Callback;
use Runtime.Exceptions.AssertException;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Unit.Test;
use Runtime.Unit.UnitTest;


class TestProvider extends BaseProvider
{
    Collection<string> tests_list = [];
    
	
    /**
	 * Start provider
	 */
	async void start()
	{
		this.tests_list = @.entities.filter( lib::isInstance(classof UnitTest) );
    }
    
	
	/**
	 * Returns commands list
	 */
	Collection<string> getTests() => this.tests_list;
	
	
	/**
	 * Returns unit test by pos
	 */
	UnitTest get(int pos) => this.tests_list.get(pos);
	
	
	/**
	 * Returns count of unit tests
	 */
	int count() => this.tests_list.count();
	
	
	/**
	 * Run
	 */
	static async void run(string test_name = "")
	{
		TestProvider provider = new TestProvider();
		await provider.start();
		
		if (test_name == "")
		{
			io::print("List of all tests:");
			for (int i=0; i<provider.count(); i++)
			{
				UnitTest test = provider.get(i);
				io::print( (i + 1) ~ ") " ~ test.name );
			}
			return;
		}
		
		await provider.runTestByName(test_name);
	}
	
	
	/**
	 * Run
	 */
	static async void runAll()
	{
		TestProvider provider = new TestProvider();
		await provider.start();
		
		for (int i=0; i<provider.count(); i++)
		{
			UnitTest test = provider.get(i);
			io::print("Run " ~ test.name);
			int error_code = await provider.runTestByName(test.name);
			if (error_code != 1)
			{
				return;
			}
		}
	}
	
	
	/**
	 * Run test
	 */
	async int runTestByName(string test_name)
	{
		int error_code = 0;
		
		Collection arr = rs::split("::", test_name);
		if (arr.count() == 1)
		{
			/* Run all test in class */
			error_code = await this.runTestClass(arr.get(0));
		}
		else
		{
			/* Run specific test */
			error_code = await this.runTestMethod(arr.get(0), arr.get(1));
		}
		
		return error_code;
	}
	
	
	/**
	 * Returns true if TestMethod
	 */
	static bool isTestMethod(Dict method_info)
	{
		Collection annotations = method_info["annotations"];
		if (annotations)
		{
			for (int j=0; j<annotations.count(); j++)
			{
				BaseStruct annotation = annotations.get(j);
				if (annotation instanceof Test)
				{
					return true;
				}
			}
		}
		return false;
	}
	
	
	/**
	 * Returns all test methods
	 */
	Collection getTestMethods(string class_name)
	{
		Callback getMethodsList = new Callback(class_name, "getMethodsList");
		Callback getMethodInfoByName = new Callback(class_name, "getMethodInfoByName");
		
		Collection<string> methods = rtl::apply(getMethodsList);
		methods = methods.filter(
			bool (string method_name) use (getMethodInfoByName)
			{
				Dict method_info = rtl::apply(getMethodInfoByName, [method_name]);
				return static::isTestMethod(method_info);
			}
		);
		
		return methods;
	}
	
	
	/**
	 * Run all test in class
	 */
	async int runTestClass(string class_name)
	{
		int error_code = 1;
		Collection methods = this.getTestMethods(class_name);
		
		for (int i=0; i<methods.count(); i++)
		{
			string method_name = methods.get(i);
			int result = await this.runTestMethod(class_name, method_name);
			if (result != 1)
			{
				error_code = -1;
				break;
			}
		}
		
		if (error_code == 1)
		{
			io::print(io::color("green", "Success"));
		}
		
		return error_code;
	}
	
	
	/**
	 * Run test method
	 */
	async int runTestMethod(string class_name, string method_name)
	{
		int error_code = 0;
		try
		{
			Callback callback = new Callback(class_name, method_name);
			if (not callback.exists())
			{
				var obj = rtl::newInstance(class_name);
				callback = new Callback(obj, method_name);
			}
			if (callback.exists())
			{
				await rtl::apply(callback);
				error_code = 1;
				io::print(class_name ~ "::" ~ method_name ~ " " ~ io::color("green", "Ok"));
			}
			else
			{
				throw new ItemNotFound(class_name ~ "::" ~ method_name, "Method");
			}
		}
		catch (AssertException e)
		{
			io::print(class_name ~ "::" ~ method_name ~ " " ~
				io::color("red", "Error: " ~ e.getErrorMessage()));
			error_code = e.getErrorCode();
		}
		return error_code;
	}
}