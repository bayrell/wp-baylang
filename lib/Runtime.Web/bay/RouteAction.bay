/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.Callback;
use Runtime.SerializeInterface;
use Runtime.Serializer;
use Runtime.Entity.Factory;
use Runtime.Web.RouteInfo;
use Runtime.Web.RenderContainer;


class RouteAction extends RouteInfo
{
    var action = null;
    
    
    /**
	 * Process frontend data
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "action", data);
		parent(serializer, data);
	}
    
	
	/**
	 * Copy route
	 */
	RouteInfo copy()
	{
		RouteInfo route = parent();
		route.action = this.action;
		return route;
	}
	
    
    /**
	 * Render route
	 */
	async void render(RenderContainer container)
	{
        if (rtl::isCallable(this.action))
		{
			fn f = this.action;
			await rtl::apply(f, [container]);
		}
		else if (this.action instanceof Factory)
		{
			container.base_route = this.action.factory();
			Callback action = new Callback(container.base_route, container.base_route.action);
			if (action.exists())
			{
				await rtl::apply(action, [container]);
			}
		}
    }
}