/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Hooks;

use Runtime.lib;
use Runtime.Web.RedirectResponse;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteInfo;
use Runtime.Web.RouteList;
use Runtime.Web.Hooks.AppHook as BaseAppHook;


class LayoutHook extends BaseAppHook
{
	/**
	 * Register hooks
	 */
	void register_hooks()
	{
		this.register(static::ROUTE_BEFORE, 0);
	}
	
	
	/**
	 * Route before
	 */
	async void route_before(Map params)
	{
		RenderContainer container = params.get("container");
		
		/* Setup client ip */
		this.setupClientIP(container);
		
		/* Setup layout */
		this.setupLayoutRequest(container);
		
		/* Setup urls */
		this.setupLayoutRoutes(container);
	}
	
	
	/**
	 * Setup client ip
	 */
	void setupClientIP(RenderContainer container)
	{
		string client_ip = container.request.getClientIp();
		container.layout.backend_storage.set("client_ip", client_ip);
	}
	
	
	/**
	 * Setup layout request
	 */
	void setupLayoutRequest(RenderContainer container)
	{
		container.layout.route = container.route;
		container.layout.request_https = container.request.is_https;
		container.layout.request_host = container.request.host;
		container.layout.request_uri = container.request.uri;
		container.layout.request_full_uri = container.request.full_uri;
		container.layout.request_query = container.request.query;
	}
	
	
	/**
	 * Setup layout routes
	 */
	void setupLayoutRoutes(RenderContainer container)
	{
		container.layout.routes = {};
		RouteList routes = @.provider(classof RouteList);
		Collection<string> routes_list = routes.routes_list;
		for (int i=0; i<routes_list.count(); i++)
		{
			RouteInfo route = routes_list.get(i);
			if (route.is_backend) continue;
			container.layout.routes.set(route.name, {
				"uri": route.uri,
				"domain": route.domain,
			});
		}
	}
}