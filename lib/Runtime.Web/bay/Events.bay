/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.Callback;
use Runtime.Web.LayoutModel;


class Events extends BaseObject
{
	Map items = {};
	
	
	/**
	 * Setup widget params
	 */
	void setup(Dict params)
	{
		if (params == null) return;
		
		params.each(
			void (Callback f, string event_name)
			{
				this.add(event_name, f);
			}
		);
	}
	
	
	/**
	 * Add event
	 */
	void add(string event_name, Callback f)
	{
		if (not this.items.has(event_name)) this.items.set(event_name, []);
		if (rtl::isCallable(f))
		{
			this.items.get(event_name).append(f);
		}
	}
	
	
	/**
	 * Clear events
	 */
	void clear(string event_name)
	{
		if (this.items.has(event_name))
		{
			this.items.set(event_name, []);
		}
	}
	
	
	/**
	 * Clear all
	 */
	void clearAll()
	{
		this.items.each(
			void (string event_name)
			{
				this.clear(event_name);
			}
		);
	}
	
	
	/**
	 * Emit event
	 */
	void emit(string event_name, Collection attrs = null)
	{
		if (not this.items.has(event_name)) return;
		Vector<Callback> events = this.items.get(event_name);
		for (int i=0; i<events.count(); i++)
		{
			Callback f = events.get(i);
			rtl::apply(f, attrs);
		}
	}
}