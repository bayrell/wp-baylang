/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.Callback;
use Runtime.Chain;
use Runtime.SerializeInterface;
use Runtime.Serializer;
use Runtime.Entity.Factory;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderProvider;
use Runtime.Web.RouteList;
use Runtime.Web.Messages.Message;


class BaseModel extends BaseObject implements SerializeInterface
{
	BaseModel parent_widget = null;
	LayoutModel layout = null;
	string component = "";
	string widget_name = "";
	Map listeners = {};
	Map widgets = {};
	bool is_data_loaded = false;
	
	
	/**
	 * Create model
	 */
	void constructor(Dict params = null)
	{
		parent();
		
		/* Setup widget params */
		this.initParams(params);
		
		/* Init widget settings */
		this.initWidget(params);
		
		if (this.layout != null and this.component != "")
		{
			this.layout.addComponent(this.component);
		}
	}
	
	
	/**
	 * Init widget params
	 */
	void initParams(Dict params)
	{
		if (params == null) return;
		if (params.has("layout")) this.layout = params.get("layout");
		if (params.has("component")) this.component = params.get("component");
		if (params.has("widget_name")) this.widget_name = params.get("widget_name");
		if (params.has("events"))
		{
			Collection events = params.get("events");
			events.each(
				void (Callback f, string message_name)
				{
					this.addListener(message_name, f);
				}
			);
		}
		if (params.has("parent_widget"))
		{
			BaseModel parent_widget = params.get("parent_widget");
			this.layout = parent_widget.layout;
			this.parent_widget = parent_widget;
			parent_widget.widgets.set(this.widget_name, this);
		}
	}
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
	}
	
	
	/**
	 * Create model
	 */
	BaseModel createModel(var params, string default_model = "")
	{
		BaseModel model = null;
		if (rtl::isString(params)) model = this.addWidget(params);
		else if (params instanceof BaseModel) model = params;
		else if (params instanceof ModelFactory) model = params.factory(this);
		else if (params instanceof Factory) model = params.factory();
		else if (params instanceof Dict)
		{
			if (params.has("factory")) model = this.createModel(params.get("factory"));
			else
			{
				string class_name = params.get("model", default_model);
				model = this.addWidget(class_name, params);
			}
		}
		return model;
	}
	
	
	/**
	 * Add widget
	 */
	BaseModel addWidget(string class_name, Map params = null)
	{
		if (params == null) params = {};
		params.set("parent_widget", this);
		BaseModel widget = rtl::newInstance(class_name, [params]);
		return widget;
	}
	
	
	/**
	 * Returns widget by name
	 */
	BaseModel getWidget(string widget_name) => this.widgets.get(widget_name);
	
	
	/**
	 * Returns widget name
	 */
	BaseModel getWidgetName() => this.widget_name;
	
	
	/**
	 * Clear listeners
	 */
	void clearListener(string message_name)
	{
		Chain chain = new Chain();
		chain.setReturnValue(false);
		this.listeners.set(message_name, chain);
	}
	
	
	/**
	 * Add listener
	 */
	void addListener(string message_name, fn f, int priority = 100)
	{
		if (not this.listeners.has(message_name))
		{
			this.clearListener(message_name);
		}
		if (rtl::isCallable(f))
		{
			Chain chain = this.listeners.get(message_name);
			chain.add(f, priority);
			chain.sort();
		}
	}
	
	
	/**
	 * Emit message
	 */
	void emit(Message message)
	{
		if (message.widget == null)
		{
			message.widget = this;
		}
		this.emitMessage(message::getClassName(), message);
		this.emitMessage(message.name, message);
	}
	
	
	/**
	 * Emit message
	 */
	void emitMessage(string message_name, Message message)
	{
		if (not this.listeners.has(message_name)) return;
		Chain chain = this.listeners.get(message_name);
		chain.apply(message);
	}
	
	
	/**
	 * Async emit message
	 */
	async void emitAsync(Message message)
	{
		if (message.widget == null)
		{
			message.widget = this;
		}
		await this.emitMessageAsync(message::getClassName(), message);
		await this.emitMessageAsync(message.name, message);
	}
	
	
	/**
	 * Async emit message
	 */
	async void emitMessageAsync(string message_name, Message message)
	{
		if (not this.listeners.has(message_name)) return;
		Chain chain = this.listeners.get(message_name);
		await chain.applyAsync(message);
	}
	
	
	/**
	 * Load data
	 */
	async void loadData(RenderContainer container)
	{
		if (this.is_data_loaded) return;
		
		Collection widgets_keys = this.widgets.keys();
		for (int i=0; i<widgets_keys.count(); i++)
		{
			string widget_key = widgets_keys.get(i);
			BaseModel widget = this.widgets.get(widget_key);
			if (widget instanceof BaseModel)
			{
				await widget.loadData(container);
			}
		}
		
		this.is_data_loaded = true;
	}
	
	
	/**
	 * Process frontend data
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "component", data);
		serializer.process(this, "widget_name", data);
		serializer.processItems(this, "widgets", data, method this.serializeCreateWidget);
		serializer.process(this, "is_data_loaded", data);
	}
	
	
	/**
	 * Process frontend data
	 */
	void serializeCreateWidget(Serializer serializer, Map data)
	{
		string class_name = data.get("__class_name__");
		string widget_name = data.get("widget_name");
		
		/* If BaseModel */
		if (rtl::is_instanceof(class_name, "Runtime.Web.BaseModel"))
		{
			BaseModel widget = this.widgets.get(widget_name);
			if (widget != null) return widget;
			return this.addWidget(class_name, {
				"widget_name": widget_name,
			});
		}
		
		/* Create object */
		return rtl::newInstance(class_name);
	}
}