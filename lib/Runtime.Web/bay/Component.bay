<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Web.Component">

<use name="Runtime.re" />
<use name="Runtime.rs" />
<use name="Runtime.lib" />
<use name="Runtime.BaseObject" />
<use name="Runtime.RawString" />
<use name="Runtime.Web.Hooks.AppHook" />
<use name="Runtime.Web.RouteList" />


<template name="renderWidget" args="BaseModel widget, Dict props = null">
	%if (widget)
	{
		%set string component = widget.component;
		%if (component)
		{
			<{component} @model={{ widget }} ...props />
		}
	}
</template>


<template>
	%render this.renderSlot("default");
</template>


<script>

props string class = "";
props var data = null;
props var data_widget_path = null;
props var model = null;
props var render_list = null;
Map render_cache = new Map;

#ifdef BACKEND then
var layout = null;
var _parent_component = null;
var _props = null;
var _slots = null;
#endif


/**
 * Returns true if first in render list
 */
bool isFirstInRenderList() =>
	(this.render_list != null and this.render_list.has("first"))
	? this.render_list.get("first")
	: false
;


/**
 * Returns false if first in render list
 */
bool isLastInRenderList() =>
	(this.render_list != null and this.render_list.has("last"))
	? this.render_list.get("last")
	: false
;


/**
 * Returns position in render list
 */
int positionInRenderList() =>
	(this.render_list != null and this.render_list.has("position"))
	? this.render_list.get("position")
	: -1
;


/**
 * Returns class name for render list item
 */
string renderListClass()
{
	if (this.render_list == null) return;
	
	Vector<string> class_name = [];
	
	if (this.render_list.has("position"))
	{
		class_name.push("item--" ~ this.render_list.get("position"));
	}
	if (this.render_list.has("first") and this.render_list.get("first"))
	{
		class_name.push("item--first");
	}
	if (this.render_list.has("last") and this.render_list.get("last"))
	{
		class_name.push("item--last");
	}
	
	return rs::join(" ", class_name);
}


/**
 * Returns true slot if is exists
 */
var checkSlot(string slot_name)
{
	#switch
	
	#case ifcode PHP then
	return $this->_slots->has($slot_name);
	
	#case ifcode JAVASCRIPT then
	
	let f = this.$slots[slot_name];
	if (f == null || f == undefined) return false;
	return true;
	
	#endswitch
}


/**
 * Render slot
 */
var renderSlot(string slot_name)
{
	#switch
	
	#case ifcode PHP then
	$f = $this->_slots->get($slot_name);
	if ($f == null) return null;
	return $f();
	
	#case ifcode JAVASCRIPT then
	
	let f = this.$slots[slot_name];
	if (f == null || f == undefined) return null;
	return f();
	
	#endswitch
}


/**
 * Returns component key path
 */
Collection<string> getKeyPath()
{
	Vector<string> result = [];
	var component = this;
	while (component != null)
	{
		result.push(this.key);
		component = component.getParent();
	}
	return result;
}


/**
 * Parent component
 */
var getParent()
{
	#switch
	#case ifcode PHP then
	return $this->_parent_component;
	#case ifcode JAVASCRIPT then
	return this.$parent;
	#endswitch
}


/**
 * Returns ref
 */
var getRef(string name)
{
	#switch
	#case ifcode PHP then
	return null;
	#case ifcode JAVASCRIPT then
	return this.$refs[name];
	#endswitch
}


/**
 * Returns props
 */
var getProps()
{
	#switch
	#case ifcode PHP then
	return $this->_props;
	#case ifcode JAVASCRIPT then
	return this.$props;
	#endswitch
}


/**
 * Emit message
 */
void emit(string event, var obj=null)
{
	#switch
	#case ifcode JAVASCRIPT then
	this.$emit.apply(this, arguments);
	#endswitch
}


/**
 * Reload component
 */
void reload(string event, var obj=null)
{
	#switch
	#case ifcode JAVASCRIPT then
	this.$forceUpdate();
	#endswitch
}


/**
 * Constructor
 */
void constructor()
{
	parent();
	this.initWidget();
}


/**
 * Init widget settings
 */
void initWidget()
{
}


/**
 * Before create
 */
static void onBeforeCreate()
{
}


/**
 * Created
 */
void onCreated()
{
}


/**
 * Before mount
 */
void onBeforeMount()
{
}


/**
 * Mounted
 */
void onMounted()
{
}


/**
 * Before update
 */
void onBeforeUpdate()
{
}


/**
 * Updated
 */
void onUpdated()
{
}


/**
 * Before Unmount
 */
void onBeforeUnmount()
{
}


/**
 * Unmounted
 */
void onUnmount()
{
}


/**
 * Next tick
 */
async void nextTick(fn f)
{
	var Vue = window["Vue"];
	await Vue.nextTick(f);
}


/**
 * Returns model for component
 */
var _model(var obj = null, bool is_global = false)
{
	if (obj instanceof Collection)
	{
		if (obj.count() == 0)
		{
			return this.model;
		}
		if (is_global)
		{
			return this.layout.model(obj);
		}
		return rtl::attr(this.model, obj);
	}
	return obj;
}


/**
 * Returns component class name
 */
string _class_name(var names)
{
	#switch
	
	#case ifcode PHP then
	$names[] = static::getCssHash(static::getClassName());
	$names = array_filter($names, function($s){ return $s != ""; });
	return implode(" ", $names);
	
	#case ifcode JAVASCRIPT then
	names.push(this.$options.getCssHash(this.$options.getClassName()));
	names = names.filter((s) => s != "");
	return names.join(" ");
	
	#endswitch
}


/**
 * Merge attrs
 */
var _merge_attrs(var attr1, var attr2)
{
	if (attr2 == null) return attr1;
	
	#switch
	
	#case ifcode PHP then
	return array_merge($attr1, $attr2->_map);
	
	#case ifcode JAVASCRIPT then
	return Object.assign({}, attr1, attr2.toObject());
	
	#endswitch
}


/**
 * Filter attrs
 */
var _filter_attrs(var attrs)
{
	#switch
	
	#case ifcode PHP then
	return null;
	
	#case ifcode JAVASCRIPT then
	var new_attrs = {};
	Object.entries(attrs).forEach((arr)=>{
		var key = arr[0];
		var value = arr[1];
		if (key == "@key_debug" && new_attrs["key"] == undefined)
		{
			new_attrs["key"] = value;
			return;
		}
		if (key.charAt(0) == "@") return;
		new_attrs[key] = value;
	});
	return new_attrs;
	
	#endswitch
}


/**
 * Escape html
 */
string _escape(var s)
{
	if (rtl::isScalarValue(s)) return rs::htmlEscape(s);
	return "";
}


/**
 * Render text
 */
void _t(var parent_elem, var content = null)
{
	if (content == null) return;
	
	#switch
	#case ifcode PHP then
	
	if ($content instanceof \Runtime\Collection)
	{
		$parent_elem->appendItems($content);
	}
	else
	{
		$parent_elem->push($content);
	}
	
	#case ifcode JAVASCRIPT then
	
	if (content instanceof Array && content.length == 0) return;
	if (Runtime.rtl.isScalarValue(content)) content = "" + content;
	this._parent_elem_push(parent_elem, content);
	
	#endswitch
}


/**
 * Render element
 */
var _e(var parent_elem, string elem_name = null, var attrs = null, var content = null)
{
	var elem = null;
	
	#switch
	#case ifcode PHP then
	
	$attrs_str = "";
	
	if ($attrs != null && count($attrs) > 0)
	{
		$attrs = array_map(
			function ($value, $key)
			{
				return $key . "='" . \Runtime\rs::escapeHtml($value) . "'";
			},
			array_values($attrs),
			array_keys($attrs)
		);
		$attrs_str = " " . implode(" ", $attrs);
	}
	
	if ($elem_name == "br")
	{
		$parent_elem->append("<br/>");
	}
	else
	{
		$elem = new \Runtime\Vector();
		$elem->push("<" . $elem_name . $attrs_str . ">");
		
		if ($content instanceof \Runtime\Collection)
		{
			$elem->appendItems($content);
		}
		else if (is_string($content) or $content instanceof \Runtime\RawString)
		{
			$elem->push($content);
		}
		
		$elem->push("</" . $elem_name . ">");
		$parent_elem->append($elem->join(""));
	}
	
	#case ifcode JAVASCRIPT then
	
	attrs = this._filter_attrs(attrs);
	elem = Vue.h(elem_name, attrs);
	this._parent_elem_push(parent_elem, elem);
	
	#endswitch
	
	return elem;
}


/**
 * Render component
 */
var _c(var parent_elem, string component_name = null, var attrs = null, var content = null)
{
	var elem = null;
	
	#switch
	#case ifcode PHP then
	
	if (
		$component_name == "KeepAlive" or
		$component_name == "Transition" or
		$component_name == "TransitionGroup"
	)
	{
		$component_name = "Runtime.Web.Component";
	}
	$component = \Runtime\rtl::newInstance($component_name);
	$component->layout = $this->layout;
	$component->_parent_component = $this;
	$component->_props = $attrs;
	if ($content instanceof \Runtime\Dict) $component->_slots = $content;
	else $component->_slots = \Runtime\Dict::from([ "default" => $content ]);
	if ($attrs != null)
	{
		foreach ($attrs as $key => $value)
		{
			if (property_exists($component, $key))
			{
				$component->$key = $value;
			}
		}
	}
	$elem = $component->render();
	
	if ($elem instanceof \Runtime\Collection)
	{
		/*$parent_elem->push("<!--[-->");*/
		$parent_elem->appendItems($elem);
		/*$parent_elem->push("<!--]-->");*/
	}
	else if (is_string($elem) or $elem instanceof \Runtime\RawString)
	{
		$parent_elem->push($elem);
	}
	
	#case ifcode JAVASCRIPT then
	
	let component = null;
	if (component_name == "Transition") component = Vue.Transition;
	else if (component_name == "TransitionGroup") component = Vue.TransitionGroup;
	else component = use(component_name);
	if (!component)
	{
		throw new Runtime.Exceptions.ItemNotFound(component_name);
	}
	
	attrs = this._filter_attrs(attrs);
	elem = Vue.h(component, attrs, content);
	this._parent_elem_push(parent_elem, elem);
	
	#endswitch
	
	return elem;
}


/**
 * Push to parent elem
 */
void _parent_elem_push(var parent_elem, var elem)
{
	#ifcode JAVASCRIPT then
	
	if (parent_elem instanceof Array)
	{
		if (elem instanceof Array)
		{
			for (let i=0; i<elem.length; i++) parent_elem.push(elem[i]);
		}
		else
		{
			parent_elem.push(elem);
		}
	}
	else if (typeof parent_elem == "object")
	{
		if (elem instanceof Array)
		{
			if (parent_elem.children == null)
			{
				parent_elem.children = [];
				parent_elem.shapeFlag = 17;
			}
			for (let i=0; i<elem.length; i++) parent_elem.children.push(elem[i]);
		}
		else if (elem instanceof Runtime.RawString)
		{
			if (parent_elem.props == undefined || parent_elem.props == null)
			{
				parent_elem.props = {};
			}
			parent_elem.props["innerHTML"] = elem.toString();
		}
		else if (typeof elem == "string")
		{
			if (parent_elem.children == null)
			{
				parent_elem.children = "";
				parent_elem.shapeFlag = 9;
			}
			if (parent_elem.children instanceof Array)
			{
				parent_elem.children.push(elem);
			}
			else
			{
				parent_elem.children += elem;
			}
		}
		else if (typeof elem == "object")
		{
			if (parent_elem.children == null)
			{
				parent_elem.children = [];
				parent_elem.shapeFlag = 17;
			}
			if (typeof parent_elem.children == "string")
			{
				parent_elem.children = [parent_elem.children];
				parent_elem.shapeFlag = 17;
			}
			parent_elem.children.push(elem);
		}
	}
	
	#endif
}


/**
 * Flatten elements
 */
void _flatten(var arr, bool detect_multiblock = true)
{
	#switch
	#case ifcode PHP then
	
	if ($arr->count() == 0) return "";
	if ($arr->count() == 1) return \Runtime\rtl::toString($arr->get(0));
	
	if ($detect_multiblock)
	{
		$arr->insert(0, "<!--[-->");
		$arr->push("<!--]-->");
	}
	
	return $arr->join("");
	
	#case ifcode JAVASCRIPT then
	
	if (arr.length == 0) return null;
	if (arr.length == 1) return arr[0];
	return arr;
	
	#endswitch
}


/**
 * Teleport
 */
void _teleport(var parent_elem, var attrs = null, var content = null)
{
	#switch
	#case ifcode PHP then
	
	$parent_elem->push("<!--teleport start--><!--teleport end-->");
	$this->layout->teleports->push($content->join(""));
	
	#case ifcode JAVASCRIPT then
	
	if (attrs.to == undefined) attrs["to"] = ".teleports";
	let elem = Vue.h(Vue.Teleport, attrs, []);
	this._parent_elem_push(parent_elem, elem);
	
	return elem;
	
	#endswitch
}


/**
 * Returns styles
 */
static string getStyles(string class_name, Collection styles) => styles
	.map(
		string (string item) use (class_name) =>
			rs::charAt(item, 0) != "@"
				? class_name ~ "--" ~ item
				: rs::substr(item, 1)
	)
	.join(" ")
;


/**
 * Returns components
 */
static Vector components()
{
	return [];
}


/**
 * Returns assets
 */
pure string assets(string path)
{
	Dict params = {};
	@.callHook(AppHook::ASSETS, params);
	string path = rs::join_path([params.get("assets_path", ""), path])
	return rs::addFirstSlash(path);
}


/**
 * Returns css hash
 */
pure memorize string getCssHash(string class_name) =>
	rtl::getParents(class_name)
		|> .toVector()
		|> .prepend(class_name)
		|> .filter
		(
			bool (string class_name) =>
				class_name != "Runtime.BaseObject" and
				class_name != "Runtime.Web.Component" and
				class_name != ""
		)
		|> .map
		(
			string (string class_name) => "h-" ~ static::hash(class_name)
		)
		|> lib::join(" ")
	;


/**
 * Retuns css hash
 * @param string component class name
 * @return string hash
 */
pure memorize string hash(string s)
{
	int h = rs::hash(s, true, 337, 65537) + 65537;
	string res = rs::toHex(h);
	return rs::substr(res, -4);
}


/**
 * Is component
 */
pure bool isComponent(string tag_name)
{
	string ch1 = rs::substr(tag_name, 0, 1);
	string ch2 = rs::upper(ch1);
	return tag_name != "" and (ch1 == "{" or ch1 == ch2);
}

</script>

</class>
