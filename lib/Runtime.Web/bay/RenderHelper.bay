/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web;

use Runtime.re;
use Runtime.rtl;
use Runtime.lib;
use Runtime.Math;
use Runtime.Vector;


class RenderHelper
{
	/**
	 * From rgb
	 */
	pure list rgbToInt(string color)
	{
		string ch = static::substr(color, 0, 1);
		if (ch == "#") color = static::substr(color, 1);
		
		string r = "";
		string g = "";
		string b = "";
		
		int sz = static::strlen(color);
		if (sz == 3)
		{
			r = rs::substr(color, 0, 1); r ~= r;
			g = rs::substr(color, 1, 1); g ~= g;
			b = rs::substr(color, 2, 1); b ~= b;
		}
		else if (sz == 6)
		{
			r = rs::substr(color, 0, 2);
			g = rs::substr(color, 2, 2);
			b = rs::substr(color, 4, 2);
		}
		
		r = static::hexdec(r);
		g = static::hexdec(g);
		b = static::hexdec(b);
		
		return [r, g, b];
	}


	/**
	 * From rgb
	 */
	pure string intToRgb(int r, int g, int b)
	{
		#switch
		
		#case ifcode PHP then
		return sprintf("%02x%02x%02x", $r, $g, $b);
		
		#case ifcode JAVASCRIPT then
		
		r = r.toString(16).padStart(2, '0');
		g = g.toString(16).padStart(2, '0');
		b = b.toString(16).padStart(2, '0');
		
		return r + g + b;
		
		#endswitch
	}


	/**
	 * Brightness
	 */
	static string brightness(string color, int percent)
	{
		Collection color = static::rgbToInt(color);
		
		int r = color[0];
		int g = color[1];
		int b = color[2];
		
		r = Math::round(r + (r * percent / 100));
		g = Math::round(g + (g * percent / 100));
		b = Math::round(b + (b * percent / 100));
		
		if (r > 255) r = 255;
		if (g > 255) g = 255;
		if (b > 255) b = 255;
		if (r < 0) r = 0;
		if (g < 0) g = 0;
		if (b < 0) b = 0;
		
		return "#" ~ static::intToRgb(r,g,b);
	}


	/**
	 * Strip tags
	 */
	pure string strip_tags(string content, Collection<string> allowed_tags = null)
	{
		if (allowed_tags == null)
		{
			content = re::replace("<[^>]+>", "", content);
			content = rs::trim(rs::spaceless(content));
			return content;
		}
		
		Collection matches = re::matchAll("<[^>]+>", content, "i");
		if (matches)
		{
			for (int i=0; i<matches.count(); i++)
			{
				Collection match = matches[i];
				string tag_str = match[0];
				
				Collection tag_match = re::matchAll("<(\/|)([a-zA-Z]+)(|[^>]*)>", tag_str, "i");
				if (tag_match)
				{
					string tag_name = static::strtolower(tag_match[0][2]);
					if (allowed_tags.indexOf(tag_name) == -1)
					{
						content = static::replace(tag_str, "", content);
					}
				}
			}
		}
		
		content = rs::trim(rs::spaceless(content));
		return content;
	}
}