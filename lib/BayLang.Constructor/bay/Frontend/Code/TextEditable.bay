<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="BayLang.Constructor.Frontend.Code.TextEditable">

<use name="Runtime.Reference" />
<use name="Runtime.Web.Messages.ValueChangeMessage" />


<style>
.widget_text{
	display: flex;
	align-items: stretch;
	width: 100%;
	max-width: 100%;
	border-width: var(--widget-border-width);
	border-color: var(--widget-color-border);
	border-style: solid;
	border-radius: 4px;
	overflow: auto;
}
.widget_text__lines{
	width: 20px;
	padding-top: 7px;
	border-right-width: var(--widget-border-width);
	border-right-color: var(--widget-color-border);
	border-right-style: solid;
}
.widget_text__lines .line{
	display: flex;
	align-items: center;
	justify-content: center;
	min-height: 21px;
}
.widget_text__editable{
	width: calc(100% - 20px);
	font-family: monospace;
	font-size: var(--widget-font-size);
	padding: var(--widget-button-padding-y) var(--widget-button-padding-x); margin: 0;
	background-color: var(--widget-color-default);
	box-shadow: none;
	outline: transparent;
	line-height: 1.5;
	tab-size: 4;
	text-wrap: balance;
	white-space: pre;
}
.widget_text__editable .line{
	min-height: 21px;
}
.widget_text__editable.wrap{
	overflow-wrap: break-word;
	text-wrap: wrap;
}
.widget_text__editable.overflow{
	overflow: auto;
	text-wrap: nowrap;
}
</style>


<template>
	%set Map props = this.getProps();
	<div class="widget_text">
		<div class="widget_text__lines">
		%for (int i=0; i<this.lines.count(); i++)
		{
			<div class="line" @key={{ i }} style={{ "width: " ~ this.lines.get(i) ~ "px" }}>
				{{ i + 1 }}
			</div>
		}
		</div>
		<div class="widget_text__editable"
			class={{ this.class }}
			name={{ this.name }}
			contenteditable="plaintext-only"
			@event:keydown={{ this.onKeyDown }}
			@event:input={{ this.onInput }}
			@event:paste={{ this.onPaste }}
			@ref="text"
			...props
		></div>
	</div>
</template>


<script>

props Reference reference = null;
props bool readonly = false;
props int timeout = 500;
props string name = "";
props string value = "";
Collection<int> lines = [];
var change_timer = null;
var old_value = null;


/**
 * Returns value
 */
string getValue()
{
	var nodes = this.getRef("text").childNodes;
	Collection content = [];
	for (int i=0; i<nodes.length; i++)
	{
		string item = nodes.item(i).innerText.trimRight();
		content.push(item);
	}
	return rs::join("\n", content);
}


/**
 * Set value
 */
void setValue(string content)
{
	var text = this.getRef("text");
	this.old_value = content;
	
	/* Add lines */
	text.innerHTML = "";
	Collection<string> lines = rs::split("\n", content);
	for (int i=0; i<lines.count(); i++)
	{
		string line_text = lines.get(i).trimRight();
		var line_elem = this.createNewLine(line_text);
		text.append(line_elem);
	}
	
	/* Update lines */
	this.updateLinesCount();
}


/**
 * Returns textarea props
 */
Map getProps()
{
	if (this.readonly) return {
		"readonly": true,
	};
	return {};
}


/**
 * Returns new line
 */
var createNewLine(string text = "")
{
	var div = document.createElement("div");
	div.classList.add("line");
	div.innerText = text;
	return div;
}


/**
 * Returns line
 */
var findLine(var node)
{
	while (node and (node.nodeType == 3 or not(node.classList.contains("line"))))
	{
		node = node.parentElement;
	}
	return node;
}


/**
 * Returns line element
 */
var getLineElement(int pos) => this.getRef("text").childNodes.item(pos);


/**
 * Returns line element
 */
var getLinePosition(var line)
{
	var nodes = this.getRef("text").childNodes;
	for (int i=0; i<nodes.length; i++)
	{
		if (nodes.item(i) == line) return i;
	}
	return -1;
}


/**
 * Returns node offset
 */
int getNodeOffset(var line, var node, int offset)
{
	int pos = 0;
	bool is_line = line == node;
	var current = line.firstChild;
	while (current)
	{
		if (is_line and offset == 0) break;
		if (current.nodeType == 3)
		{
			if (is_line)
			{
				offset = offset - 1;
			}
			else
			{
				if (current == node)
				{
					return pos + offset;
				}
			}
			pos = pos + current.textContent.length;
		}
		current = current.nextSibling;
	}
	return pos;
}


/**
 * Returns selection
 */
var getSelection() => this.getRef("text").ownerDocument.defaultView.getSelection();


/**
 * Returns cursor position
 */
var getCursorPos()
{
	var selection = this.getSelection();
	var range = selection.getRangeAt(0);
	
	/* Get range start */
	var start_line = this.findLine(range.startContainer);
	int start_y = this.getLinePosition(start_line);
	int start_x = this.getNodeOffset(start_line, range.startContainer, range.startOffset);
	
	/* Get range end */
	var end_line = this.findLine(range.endContainer);
	int end_y = this.getLinePosition(end_line);
	int end_x = this.getNodeOffset(end_line, range.endContainer, range.endOffset);
	
	return {
		"start_y": start_y, "start_x": start_x,
		"end_y": end_y, "end_x": end_x,
	}
}


/**
 * Set cursor position
 */
void setCursorPos(int x, int y)
{
	var selection = this.getSelection();
	var range = document.createRange();
	
	/* Get first node of line */
	var line_elem = this.getLineElement(y);
	var current = line_elem.firstChild;
	
	/* Find node contains x */
	int pos = 0;
	int offset = 0;
	while (current)
	{
		if (current.nodeType == 3)
		{
			int node_size = current.textContent.length;
			if (pos + node_size >= x)
			{
				offset = x - pos;
				break;
			}
			pos = pos + node_size;
		}
		current = current.nextSibling;
	}
	
	/* If node not found */
	if (current == null)
	{
		current = line_elem;
		offset = line_elem.childNodes.length;
	}
	
	/* Set cursor */
	range.setStart(current, offset);
	range.setEnd(current, offset);
	selection.removeAllRanges();
	selection.addRange(range);
	
	return range;
}


/**
 * Update lines count
 */
void updateLinesCount()
{
	this.lines = [];
	var nodes = this.getRef("text").childNodes;
	for (int i=0; i<nodes.length; i++)
	{
		var item = nodes.item(i);
		this.lines.push(item.getBoundingClientRect().height);
	}
}


/**
 * Mounted event
 */
void onMounted()
{
	if (this.reference) this.reference.setValue(this);
	this.setValue(this.value);
}


/**
 * Updated event
 */
void onUpdated()
{
	if (this.old_value == this.value) return;
	if (this.change_timer) return;
	this.setValue(this.value);
}


/**
 * Paste text to current position
 */
void pasteText(string text)
{
	Dict cursor = this.getCursorPos();
	int line_pos = cursor.get("end_y");
	int line_offset = cursor.get("end_x");
	int line_offset_new = 0;
	var line_elem = this.getLineElement(line_pos);
	string line_text = line_elem.innerText;
	
	Collection<string> lines = rs::split("\n", text);
	if (lines.count() > 1)
	{
		/* Change first line */
		string first_line = lines.shift();
		line_elem.innerText = line_text.slice(0, line_offset) ~ first_line;
		
		/* Change last line */
		int lines_last_pos = lines.count() - 1;
		lines.set(
			lines_last_pos,
			lines.get(lines_last_pos) ~ line_text.slice(line_offset)
		);
	}
	else
	{
		string first_line = line_text.slice(0, line_offset) ~ lines.pop();
		line_elem.innerText = first_line ~ line_text.slice(line_offset);
		line_offset_new = rs::strlen(first_line);
	}
	
	/* Insert lines after line_elem */
	int lines_count = lines.count();
	for (int i=0; i<lines_count; i++)
	{
		string line_content = lines.get(i);
		var line_new = this.createNewLine(line_content);
		line_elem = line_elem.insertAdjacentElement("afterend", line_new);
		if (i == lines_count - 1) line_offset_new = rs::strlen(line_content);
	}
	
	this.setCursorPos(line_offset_new, line_pos + lines.count());
	this.updateLinesCount();
}


/**
 * Key down event
 */
void onKeyDown(var e)
{
	if (e.key == "Enter")
	{
		e.preventDefault();
		e.stopPropagation();
		this.pasteText("\n");
	}
	else if (e.key == "Backspace")
	{
		Dict cursor = this.getCursorPos();
		if (cursor.get("start_x") == 0)
		{
			window.setTimeout(void (){ this.updateLinesCount(); }, 10);
		}
	}
	else if (e.key == "Delete")
	{
		Dict cursor = this.getCursorPos();
		var line = this.getLineElement(cursor.get("start_y"));
		if (cursor.get("start_x") == line.innerText.length)
		{
			window.setTimeout(void (){ this.updateLinesCount(); }, 10);
		}
	}
	else if (e.key == "Tab")
	{
		e.preventDefault();
		e.stopPropagation();
		
		/* Shift + Tab */
		if (e.shiftKey)
		{
			Dict cursor = this.getCursorPos();
			var line = this.getLineElement(cursor.get("start_y"));
			int offset = cursor.get("start_x");
			if (offset == 0) return;
			
			string text = line.innerText;
			string last_char = rs::charAt(text, offset - 1);
			if (last_char != "\t") return;
			
			line.innerText = text.slice(0, offset - 1) ~ text.slice(offset);
			this.setCursorPos(offset - 1, cursor.get("start_y"));
		}
		
		/* Tab */
		else
		{
			var node = document.createTextNode("\t");
			var selection = this.getSelection();
			var range = selection.getRangeAt(0);
			range.insertNode(node);
			range.setStartAfter(node);
			range.setEndAfter(node);
		}
	}
}


/**
 * Paste event
 */
void onPaste(var e)
{
	e.preventDefault();
	e.stopPropagation();
	string text = e.clipboardData.getData("text");
	this.pasteText(text);
}


/**
 * Input event
 */
void onInput(var e)
{
	if (this.change_timer != null)
	{
		window.clearTimeout(this.change_timer);
		this.change_timer = null;
	}
	this.change_timer = window.setTimeout(void (){ this.onChange(); }, this.timeout);
}


/**
 * Change event
 */
void onChange(var e)
{
	string value = this.getValue();
	
	/* Send value change */
	this.emit("valueChange", new ValueChangeMessage{
		"value": value,
		"old_value": this.old_value,
		"data": this.data,
	});
	
	/* Set old value */
	this.old_value = value;
	this.change_timer = null;
}


</script>

</class>