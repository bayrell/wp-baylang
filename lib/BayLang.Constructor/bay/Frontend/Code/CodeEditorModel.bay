/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Code;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.BasePageModel;
use Runtime.Web.RenderContainer;
use Runtime.Widget.WidgetResultModel;
use Runtime.Widget.Button.ButtonModel;
use Runtime.Widget.ContextMenu.ContextMenuMessage;
use Runtime.Widget.ContextMenu.ContextMenuModel;
use Runtime.Widget.Dialog.ConfirmDialogModel;
use Runtime.Widget.Dialog.DialogMessage;
use Runtime.Widget.Dialog.PromptDialogModel;
use Runtime.Widget.Tree.TreeMessage;
use Runtime.Widget.Tree.TreeModel;
use BayLang.Constructor.Frontend.Code.CodeEditor;
use BayLang.Constructor.Frontend.Code.TreeItem;
use BayLang.Constructor.Frontend.Code.TreeWidget;


class CodeEditorModel extends BasePageModel
{
	string component = classof CodeEditor;
	string project_id = "";
	string copy_past_kind = "";
	string copy_past_path = "";
	ConfirmDialogModel confirm_dialog = null;
	PromptDialogModel prompt_dialog = null;
	TreeModel tree = null;
	TreeItem selected_item = null;
	TreeItem selected_tab = null;
	Collection<string> selected_path = null;
	Collection<TreeItem> tabs = [];
	WidgetResultModel save_result = null;
	ContextMenuModel context_menu = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Setup settings */
		this.project_id = this.layout.route.matches.get("project_id");
		
		/* Save result */
		this.save_result = this.addWidget(
			classof WidgetResultModel,
			{
				"widget_name": "save_result"
			}
		);
		
		/* Confirm dialog */
		this.confirm_dialog = this.addWidget(
			classof ConfirmDialogModel,
			{
				"widget_name": "confirm_dialog",
				"events":
				{
					"confirm": new Callback(this, "onDialogConfirm"),
				},
			}
		);
		
		/* Prompt dialog */
		this.prompt_dialog = this.addWidget(
			classof PromptDialogModel,
			{
				"widget_name": "prompt_dialog",
				"events":
				{
					"confirm": new Callback(this, "onDialogConfirm"),
				},
			}
		);
		
		/* Create Tree */
		this.tree = this.addWidget(classof TreeModel, {
			"component": classof TreeWidget,
			"dnd": false,
			"icons": true,
			"events":
			{
				"selectItem": new Callback(this, "onTreeSelectItem"),
				"contextMenu": new Callback(this, "onTreeContextMenu"),
			},
			"context_menu":
			{
				"items":
				[
					{
						"label": "Create file",
						"key": "create_file",
					},
					{
						"label": "Create folder",
						"key": "create_folder",
					},
					{
						"label": "Rename",
						"key": "rename",
					},
					{
						"label": "Cut",
						"key": "cut",
					},
					{
						"label": "Copy",
						"key": "copy",
					},
					{
						"label": "Paste",
						"key": "paste",
					},
					{
						"label": "Delete",
						"key": "delete",
					},
				],
				"events":
				{
					"clickItem": new Callback(this, "onContextMenuItemClick"),
				}
			},
		});
		this.tree.root = new TreeItem
		{
			"project_id": this.project_id,
			"open": true,
		};
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle("Code editor");
	}
	
	
	/**
	 * Load data
	 */
	async void loadData(RenderContainer container)
	{
		await parent(container);
		
		/* Load root */
		await this.loadItems(this.tree.root);
	}
	
	
	/**
	 * Remove tab
	 */
	void selectTab(TreeItem item)
	{
		this.selected_tab = item;
	}
	
	
	/**
	 * Add tab
	 */
	void addTab(TreeItem item)
	{
		this.tabs.push(this.selected_item);
	}
	
	
	/**
	 * Remove tab
	 */
	void removeTab(TreeItem item)
	{
		this.tabs.removeItem(item);
		this.save_result.clear();
		if (this.selected_tab == item) this.selected_tab = null;
	}
	
	
	/**
	 * Tree context menu
	 */
	void onTreeContextMenu(TreeMessage message)
	{
		TreeItem item = message.item;
		this.tree.context_menu.items.each(
			void (Dict params) use (item)
			{
				string key = params.get("key");
				
				/* Copy */
				if (key == "copy" or key == "cut" or key == "rename" or key == "delete")
				{
					if (item == null)
					{
						params.set("hidden", true);
					}
					else
					{
						params.set("hidden", false);
					}
				}
				
				/* Paste */
				if (key == "paste")
				{
					if (
						this.copy_past_path == "" or
						item != null and rs::dirname(this.copy_past_path) == item.file_path or
						item == null and rs::dirname(this.copy_past_path) == ""
					)
					{
						params.set("hidden", true);
					}
					else
					{
						params.set("hidden", false);
					}
				}
			}
		);
	}
	
	
	/**
	 * Context menu item click
	 */
	async void onContextMenuItemClick(ContextMenuMessage message)
	{
		string item_key = message.item.get("key");
	
		/* Hide context menu */
		message.widget.hide();
		
		/* Create file */
		if (item_key == "create_file")
		{
			ButtonModel confirm_button = this.prompt_dialog
				.buttons.getWidget("confirm_button")
			;
			confirm_button.content = "Create";
			this.prompt_dialog.action = "create_file";
			this.prompt_dialog.title = "Create file";
			this.prompt_dialog.value = "";
			this.prompt_dialog.show();
		}
		
		/* Create folder */
		else if (item_key == "create_folder")
		{
			ButtonModel confirm_button = this.prompt_dialog
				.buttons.getWidget("confirm_button")
			;
			confirm_button.content = "Create";
			this.prompt_dialog.action = "create_folder";
			this.prompt_dialog.title = "Create folder";
			this.prompt_dialog.value = "";
			this.prompt_dialog.show();
		}
		
		/* Rename */
		else if (item_key == "rename")
		{
			ButtonModel confirm_button = this.prompt_dialog
				.buttons.getWidget("confirm_button")
			;
			confirm_button.content = "Rename";
			this.prompt_dialog.action = "rename";
			this.prompt_dialog.title = "Rename item " ~ this.selected_item.label;
			this.prompt_dialog.value = this.selected_item.label;
			this.prompt_dialog.show();
		}
		
		/* Remove */
		else if (item_key == "remove" or item_key == "delete")
		{
			ButtonModel confirm_button = this.confirm_dialog
				.buttons.getWidget("confirm_button")
			;
			confirm_button.content = "Remove";
			confirm_button.styles = ["danger"];
			this.confirm_dialog.action = "remove";
			this.confirm_dialog.title = "Remove item " ~ this.selected_item.label;
			this.confirm_dialog.show();
		}
		
		/* Copy and cut */
		else if (item_key == "copy" or item_key == "cut")
		{
			this.copy_past_path = this.selected_item.file_path;
			this.copy_past_kind = item_key;
		}
		
		/* Paste */
		else if (item_key == "paste")
		{
			if (this.copy_past_path == "") return;
			Collection<int> parent_path = this.selected_path
				? this.selected_path.slice() : [];
			TreeItem parent_item = this.tree.root.get(parent_path);
			
			/* Paste item */
			ApiResult res = await this.layout.callApi({
				"api_name": "baylang.constructor.code",
				"method_name": "move",
				"data": {
					"project_id": this.project_id,
					"file_path": this.copy_past_path,
					"dest_path": parent_item.file_path,
					"kind": this.copy_past_kind == "copy" ? "copy" : "",
				}
			});
			
			/* Success */
			if (res.isSuccess())
			{
				/* Clear path */
				this.copy_past_path = "";
				
				/* Reload items */
				parent_item.is_loaded = false;
				await this.loadItems(parent_item);
			}
		}
	}
	
	
	/**
	 * Confirm dialog
	 */
	async void onDialogConfirm(DialogMessage message)
	{
		/* Create file */
		if (
			message.widget.action == "create_file" or
			message.widget.action == "create_folder"
		)
		{
			Collection<int> parent_path = this.selected_path
				? this.selected_path.slice() : [];
			TreeItem parent_item = this.tree.root.get(parent_path);
			
			/* Create item */
			ApiResult res = await this.layout.callApi({
				"api_name": "baylang.constructor.code",
				"method_name": "create",
				"data": {
					"project_id": this.project_id,
					"file_path": this.selected_item ? this.selected_item.file_path : "",
					"file_name": message.value,
					"kind": message.widget.action == "create_file" ? "file" : "folder"
				}
			});
			
			/* Reload items */
			if (res.isSuccess())
			{
				parent_item.is_loaded = false;
				await this.loadItems(parent_item);
			}
		}
		
		/* Rename file */
		else if (message.widget.action == "rename")
		{
			Collection<int> parent_path = this.selected_path.slice(0, -1);
			TreeItem parent_item = this.tree.root.get(parent_path);
			this.selected_item.label = message.value;
			
			/* Rename item */
			ApiResult res = await this.layout.callApi({
				"api_name": "baylang.constructor.code",
				"method_name": "rename",
				"data": {
					"project_id": this.project_id,
					"file_path": this.selected_item.file_path,
					"file_new_name": message.value,
				}
			});
			
			/* Reload items */
			if (res.isSuccess())
			{
				parent_item.is_loaded = false;
				await this.loadItems(parent_item);
			}
		}
		
		/* Remove */
		else if (message.widget.action == "remove")
		{
			Collection<int> parent_path = this.selected_path.slice(0, -1);
			TreeItem parent_item = this.tree.root.get(parent_path);
			
			/* Rename item */
			ApiResult res = await this.layout.callApi({
				"api_name": "baylang.constructor.code",
				"method_name": "remove",
				"data": {
					"project_id": this.project_id,
					"file_path": this.selected_item.file_path,
				}
			});
			
			/* Reload items */
			if (res.isSuccess())
			{
				parent_item.is_loaded = false;
				await this.loadItems(parent_item);
			}
		}
	}
	
	
	/**
	 * Select item
	 */
	async void onTreeSelectItem(TreeMessage message)
	{
		this.selected_item = message.item;
		this.selected_path = message.path ? message.path.slice() : null;
		if (not this.selected_item) return;
		if (message.kind != "click") return;
		if (this.selected_item.kind == "dir")
		{
			await this.loadItems(this.selected_item);
		}
		else if (this.selected_item.kind == "file")
		{
			if (this.tabs.indexOf(this.selected_item) == -1)
			{
				this.addTab(this.selected_item);
				this.selectTab(this.selected_item);
				await this.loadFileContent(this.selected_item);
			}
			else
			{
				this.selectTab(this.selected_item);
			}
		}
	}
	
	
	/**
	 * Save file
	 */
	async void save()
	{
		if (not this.selected_tab) return;
		
		this.save_result.setWaitMessage();
		
		string content = this.selected_tab.code_editor.value().getValue();
		ApiResult res = await this.layout.callApi({
			"api_name": "baylang.constructor.code",
			"method_name": "saveContent",
			"data": {
				"project_id": this.project_id,
				"file_path": this.selected_tab.file_path,
				"content": content,
			}
		});
		
		this.save_result.setApiResult(res);
	}
	
	
	/**
	 * Load file content
	 */
	async void loadFileContent(TreeItem item)
	{
		/* Clear content */
		item.content = "";
		item.is_loaded = true;
		
		/* Send request */
		ApiResult res = await this.layout.callApi({
			"api_name": "baylang.constructor.code",
			"method_name": "getContent",
			"data": {
				"project_id": item.project_id,
				"module_id": item.module_id,
				"file_path": item.file_path,
			}
		});
		
		/* Check is response is success */
		if (not res.isSuccess()) return;
		
		/* Set file content */
		item.content = res.data.get("content");
	}
	
	
	/**
	 * Load items
	 */
	async void loadItems(TreeItem item)
	{
		if (item.isLoaded()) return;
		
		ApiResult res = await this.layout.callApi({
			"api_name": "baylang.constructor.code",
			"method_name": "getFiles",
			"data": {
				"project_id": item.project_id,
				"module_id": item.module_id,
				"file_path": item.file_path,
			}
		});
		
		item.is_loaded = true;
		if (not res.isSuccess()) return;
		
		Collection items = res.data.get("items");
		
		/* Add items */
		for (int i=0; i<items.count(); i++)
		{
			Dict file = items.get(i);
			
			string label = file.get("file_name");
			int pos = item.items.find(lib::equalAttr("label", label));
			
			/* Change item */
			if (pos >= 0)
			{
				TreeItem find_item = item.items.get(pos);
				find_item.label = file.get("file_name")
				find_item.file_path = file.get("file_path")
			}
			
			/* Add item */
			else
			{
				item.items.push(new TreeItem{
					"kind": file.get("kind"),
					"label": file.get("file_name"),
					"file_path": file.get("file_path"),
					"module_id": item.module_id,
					"project_id": item.project_id,
				});
			}
		}
		
		/* Remove items */
		for (int i=item.items.count() - 1; i >= 0; i--)
		{
			TreeItem find_item = item.items.get(i);
			int pos = items.find(lib::equalAttr("file_name", find_item.label));
			if (pos == -1)
			{
				item.items.remove(i);
			}
		}
		
		/* Sort items */
		item.items = item.items.sort(
			int (TreeItem a, TreeItem b)
			{
				if (a.kind == "dir" and b.kind == "file") return -1;
				if (a.kind == "file" and b.kind == "dir") return 1;
				return rs::compare(a.label, b.label);
			}
		);
	}
}