/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.Widget.Tree.TreeItem;
use BayLang.Constructor.Frontend.Editor.WidgetEditPageModel;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpString;


class WidgetTreeItem extends TreeItem
{
	BaseOpCode code = null;
	
	
	/**
	 * Constructor
	 */
	public void constructor(BaseOpCode code)
	{
		parent();
		this.code = code;
	}
	
	
	/**
	 * Returns true if can insert inside
	 */
	bool canDragInside()
	{
		if (not this.code) return false;
		if (this.code.tag_name == "h1") return false;
		if (this.code.tag_name == "h2") return false;
		if (this.code.tag_name == "h3") return false;
		if (this.code.tag_name == "h4") return false;
		if (this.code.tag_name == "h5") return false;
		if (this.code.tag_name == "p") return false;
		if (this.code.tag_name == "span") return false;
		return true;
	}
	
	
	/**
	 * Update item
	 */
	void updateLabel()
	{
		if (this.code instanceof OpHtmlTag)
		{
			Collection<string> names = static::getAttrValues(this.code.attrs, "class");
			if (names.count() == 0)
			{
				this.key = this.code.tag_name;
				this.label = this.code.tag_name;
			}
			else
			{
				string key = names.get(0);
				Collection<string> keys = rs::split(" ", key);
				this.key = key;
				this.label = this.code.tag_name ~ "." ~ keys.get(0);
			}
		}
		else if (this.code instanceof OpHtmlSlot)
		{
			this.key = this.code.name;
			this.label = "slot." ~ this.code.name;
		}
	}
	
	
	/**
	 * Returns attr values
	 */
	static Collection<string> getAttrValues(
		Collection<OpHtmlAttribute> attrs,
		string name
	)
	{
		attrs = attrs.filter(
			bool (OpHtmlAttribute code_attr) use (name)
			{
				if (code_attr.key != name) return false;
				if (not rtl::is_instanceof(code_attr.value, classof OpString)) return false;
				return true;
			}
		);
		attrs = attrs.map(
			string (OpHtmlAttribute code_attr) => code_attr.value.value
		);
		return attrs;
	}
}