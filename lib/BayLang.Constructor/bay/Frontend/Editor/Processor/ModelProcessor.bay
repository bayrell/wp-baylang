/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor.Processor;

use Runtime.Callback;
use BayLang.SaveOpCode;
use BayLang.Constructor.Frontend.Editor.Processor.CodeProcessor;
use BayLang.Constructor.Frontend.Editor.Parameters.Parameter;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterModel;
use BayLang.Constructor.Frontend.Editor.Widget;
use BayLang.Constructor.Frontend.Providers.EditorProvider;
use BayLang.Constructor.WidgetPage.ParameterFactory;
use BayLang.LangBay.ParserBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpAssignValue;
use BayLang.OpCodes.OpAttr;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpDict;
use BayLang.OpCodes.OpDictPair;
use BayLang.OpCodes.OpEntityName;
use BayLang.OpCodes.OpFlags;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpItems;
use BayLang.OpCodes.OpModule;
use BayLang.OpCodes.OpClassOf;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpTypeIdentifier;


class ModelProcessor extends CodeProcessor
{
	/**
	 * Setup op code
	 */
	void setupOpCode(OpModule code)
	{
		parent(code);
	}
	
	
	/**
	 * Setup widget
	 */
	void setupWidget(Widget widget)
	{
		/* Setup settings */
		this.setupSettings(widget);
		
		/* Setup params */
		this.setupParams(widget);
		
		/* Setup model settings */
		if (widget.model_settings and rtl::exists(widget.model_settings.setup))
		{
			widget.model_settings.setup(new rtl(), widget);
		}
	}
	
	
	/**
	 * Setup settings
	 */
	void setupSettings(Widget widget)
	{
		widget.model_codes = [];
		widget.model_class_name = null;
		widget.primary_model_code = null;
		widget.is_model = this.checkIsModel(widget);
		if (not widget.is_model) return;
		
		/* Get model codes */
		this.setupModelCodes(widget);
		
		/* Get model settings */
		EditorProvider editor = this.page_model.getFrameEditor();
		widget.model_settings = editor.getModelSettings(widget);
	}
	
	
	/**
	 * Check is model
	 */
	bool checkIsModel(Widget widget)
	{
		Collection<OpHtmlAttribute> attrs = widget.code.attrs;
		if (attrs)
		{
			for (int i=0; i<attrs.count(); i++)
			{
				OpHtmlAttribute attr = attrs.get(i);
				if (attr.key == "@model") return true;
			}
		}
		return false;
	}
	
	
	/**
	 * Create init widget function
	 */
	void createInitWidget()
	{
		OpDeclareFunction init_op_code = this.findFunction("initWidget");
		if (init_op_code) return init_op_code;
		
		OpDeclareClass op_code_class = this.code.findClass();
		if (not op_code_class) return null;
		
		/* Create initWidget */
		OpDeclareFunction init_op_code = new OpDeclareFunction
		{
			"name": "initWidget",
			"args":
			[
				new OpDeclareFunctionArg
				{
					"name": "params",
					"pattern": new OpTypeIdentifier
					{
						"entity_name": new OpEntityName
						{
							"names": ["Dict"],
						},
					}
				},
			],
			"flags": new OpFlags,
			"result_type": new OpTypeIdentifier
			{
				"entity_name": new OpEntityName
				{
					"names": ["void"],
				},
			},
			"items": new OpItems
			{
				"items":
				[
					new OpCall
					{
						"args":
						[
							new OpIdentifier
							{
								"kind": "var",
								"value": "params",
							},
						],
						"obj": new OpIdentifier
						{
							"kind": "classref",
							"value": "parent",
						},
					},
				],
			}
		};
		
		/* Add initWidget */
		op_code_class.functions.push(init_op_code);
		op_code_class.items.push(init_op_code);
		
		return init_op_code;
	}
	
	
	/**
	 * Setup to widget model codes
	 */
	void setupModelCodes(Widget widget)
	{
		OpDeclareFunction init_op_code = this.findFunction("initWidget");
		if (not init_op_code) return [];
		
		/* Get widget name */
		string widget_name = widget.getName();
		for (int i=0; i<init_op_code.items.items.count(); i++)
		{
			BaseOpCode op_code = init_op_code.items.items.get(i);
			
			/* Detect primary code */
			if (op_code instanceof OpAssign)
			{
				OpAssignValue op_code_item = op_code.values.get(0);
				if (static::isPrimaryCode(op_code_item, widget_name))
				{
					widget.primary_model_code = op_code_item;
				}
			}
		}
		
		/* Set model class name */
		if (widget.primary_model_code)
		{
			BaseOpCode op_code_model_name = widget.primary_model_code.expression.args.get(0);
			if (op_code_model_name instanceof OpClassOf)
			{
				widget.model_class_name = this.code.uses.get(
					op_code_model_name.entity_name.names.get(0)
				);
			}
			else if (op_code_model_name instanceof OpString)
			{
				widget.model_class_name = op_code_model_name.value;
			}
		}
	}
	
	
	/**
	 * Returns true if primary code
	 */
	pure bool isPrimaryCode(OpAssignValue op_code, string widget_name)
	{
		if (not (op_code instanceof OpAssignValue)) return false;
		if (not (op_code.expression instanceof OpCall)) return false;
		if (not (op_code.op_code instanceof OpAttr)) return false;
		if (not (op_code.op_code.obj instanceof OpIdentifier)) return false;
		if (not (op_code.op_code.value instanceof OpIdentifier)) return false;
		if (not (op_code.expression.obj instanceof OpAttr)) return false;
		if (not (op_code.expression.obj.obj instanceof OpIdentifier)) return false;
		if (not (op_code.expression.obj.value instanceof OpIdentifier)) return false;
		if (op_code.op_code.obj.value != "this") return false;
		if (op_code.op_code.value.value != widget_name) return false;
		if (op_code.expression.obj.obj.value != "this") return false;
		if (op_code.expression.obj.value.value != "addWidget") return false;
		if (op_code.expression.args.count() != 2) return false;
		if (not (op_code.expression.args.get(0) instanceof OpClassOf) and
			not (op_code.expression.args.get(0) instanceof OpString)) return false;
		if (not (op_code.expression.args.get(1) instanceof OpDict)) return false;
		return true;
	}
	
	
	/**
	 * Setup model params
	 */
	void setupParams(Widget widget)
	{
		if (not widget.model_class_name) return;
		if (not widget.primary_model_code) return;
		if (not widget.model_settings) return;
		
		/* Add params */
		widget.params.appendItems(
			widget.model_settings.getParams().map(
				Parameter (ParameterFactory factory) use (widget)
				{
					Parameter param = factory.factory(new rtl());
					param.widget = widget;
					return param;
				}
			)
		);
		
		/* Get values */
		OpDict op_dict = widget.primary_model_code.expression.args.get(1);
		if (not op_dict) return;
		if (not (op_dict instanceof OpDict)) return;
		
		/* Add params values */
		Collection<OpDictPair> values = op_dict.values;
		for (int i=0; i<values.count(); i++)
		{
			OpDictPair op_dict_pair = values.get(i);
			for (int j=0; j<widget.params.count(); j++)
			{
				Parameter param = widget.params.get(j);
				if (
					param instanceof ParameterModel and
					param.isOpCode(op_dict_pair)
				)
				{
					param.setOpCode(op_dict_pair);
				}
			}
		}
	}
	
	
	/**
	 * Set widget name
	 */
	void setWidgetName(Widget widget, string new_widget_name)
	{
		if (not widget.primary_model_code) return;
		
		/* Set name */
		string old_widget_name = widget.primary_model_code.op_code.value.value;
		widget.primary_model_code.op_code.value.value = new_widget_name;
		
		/* Get dict */
		OpDict op_dict = widget.primary_model_code.expression.args.get(1);
		if (not op_dict) return;
		if (not (op_dict instanceof OpDict)) return;
		
		/* Set assign name */
		OpDeclareClass model_class_op_code = this.code.findClass();
		if (model_class_op_code)
		{
			for (int i=0; i<model_class_op_code.items.count(); i++)
			{
				BaseOpCode op_code = model_class_op_code.items.get(i);
				if (op_code instanceof OpAssign)
				{
					OpAssignValue op_assign_value = op_code.values.get(0);
					if (op_assign_value and op_assign_value.var_name == old_widget_name)
					{
						op_assign_value.var_name = new_widget_name;
					}
				}
			}
		}
		
		/* Set widget name */
		Collection<OpDictPair> values = op_dict.values;
		for (int i=0; i<values.count(); i++)
		{
			OpDictPair op_dict_pair = values.get(i);
			if (op_dict_pair.key != "widget_name") continue;
			
			op_dict_pair.value = static::getOpCodeByValue(new_widget_name);
		}
		
		/* Change attr model name */
		if (widget.code.attrs)
		{
			for (int i=0; i<widget.code.attrs.count(); i++)
			{
				OpAttr op_code_attr = widget.code.attrs.get(i);
				if (op_code_attr.key == "@model")
				{
					op_code_attr.value.value.value = new_widget_name;
				}
			}
		}
	}
	
	
	/**
	 * Build primary content
	 */
	string buildPrimaryContent(Widget widget)
	{
		if (not widget.primary_model_code) return "";
		
		string content = "";
		try
		{
			/* Create translator */
			TranslatorES6 t = this.createTranslator();
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			
			/* Translate expression */
			list res = t.expression::Expression(t, widget.primary_model_code.expression);
			t = res.get(0);
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			content ~= res.get(1);
			content = t.program::removeContext(content);
			content = rs::trim(content);
		}
		catch (var e)
		{
		}
		
		return content;
	}
	
	
	/**
	 * Create primary code
	 */
	OpAssign createPrimaryCode(Widget widget)
	{
		/* Get default template */
		Dict template_info = widget.model_settings.getDefaultTemplate();
		fn template_factory = template_info.get("default");
		if (not template_factory) return;
		
		/* Get primary model content */
		Dict template_info = template_factory();
		string primary_model_content = template_info.get("model");
		if (primary_model_content == null) return;
		
		/* Add modules */
		if (template_info.has("modules"))
		{
			Collection<string> modules = template_info.get("modules");
			for (int i=0; i<modules.count(); i++)
			{
				string module_name = modules.get(i);
				this.addModule(module_name);
			}
		}
		
		/* Parse default template */
		OpAssign primary_model_code = null;
		ParserBay parser = this.createParser();
		try
		{
			parser = parser::setContent(parser, primary_model_content);
			list res = parser.parser_operator::readAssign(parser);
			parser = res.get(0);
			primary_model_code = res.get(1);
		}
		catch (var e)
		{
			throw e;
		}
		
		return primary_model_code;
	}
	
	
	/**
	 * Add primary code
	 */
	void addPrimaryCode(Widget widget)
	{
		if (widget.primary_model_code) return;
		
		OpDeclareFunction init_op_code = this.findFunction("initWidget");
		if (not init_op_code)
		{
			init_op_code = this.createInitWidget();
		}
		
		OpAssign primary_model_code = this.createPrimaryCode(widget);
		if (not primary_model_code) return;
		
		/* Add primary model code */
		widget.primary_model_code = primary_model_code.values.get(0);
		init_op_code.items.items.push(primary_model_code);
	}
	
	
	/**
	 * Add assign model code
	 */
	void addAssignCode(Widget widget)
	{
		OpDeclareClass model_class_op_code = this.code.findClass();
		if (not model_class_op_code) return null;
		
		/* Add module */
		string alias_name = this.code.findModule(widget.model_class_name);
		string widget_name = widget.getName();
		
		/* Assign code */
		OpAssign op_code_assign = new OpAssign
		{
			"pattern": new OpTypeIdentifier
			{
				"entity_name": new OpEntityName
				{
					"names": [alias_name],
				},
			},
			"values":
			[
				new OpAssignValue
				{
					"var_name": widget_name,
					"expression": new OpIdentifier
					{
						"kind": "const",
						"value": "null",
					},
				},
			],
		};
		
		/* Add variable */
		int insert_pos = -1;
		for (int i=0; i<model_class_op_code.items.count(); i++)
		{
			BaseOpCode op_code = model_class_op_code.items.get(i);
			if (op_code instanceof OpAssign) insert_pos = i;
		}
		model_class_op_code.items.add(op_code_assign, insert_pos);
	}
	
	
	/**
	 * Add model attribute
	 */
	void addModelAttribute(Widget widget)
	{
		OpHtmlAttribute op_code_attr = new OpHtmlAttribute
		{
			"key": "@model",
			"value": new OpAttr
			{
				"kind": "attr",
				"obj": new OpAttr
				{
					"kind": "attr",
					"obj": new OpIdentifier
					{
						"kind": "classref",
						"value": "this",
					},
					"value": new OpIdentifier
					{
						"kind": "var",
						"value": "model",
					}
				},
				"value": new OpIdentifier
				{
					"value": widget.getName()
				}
			},
		}
		widget.code.attrs.push(op_code_attr);
	}
	
	
	/**
	 * Create model
	 */
	void createModel(Widget widget)
	{
		/* Get editor */
		EditorProvider editor = this.page_model.getFrameEditor();
		
		/* Set model settings */
		widget.model_class_name = widget.settings.getModelName();
		widget.model_settings = editor.getModelSettings(widget);
		if (not widget.model_settings) return;
		if (not widget.getName()) return;
		
		/* Add module */
		this.addModule(widget.model_class_name, widget.model_settings.getAliasName());
		
		/* Add assign model code */
		this.addAssignCode(widget);
		
		/* Add primary model code */
		this.addPrimaryCode(widget);
		
		/* Add model attribute */
		this.addModelAttribute(widget);
		
		/* Set widget name */
		this.setWidgetName(widget, widget.getName());
	}
	
	
	/**
	 * Remove primary code
	 */
	void removePrimaryCode(Widget widget)
	{
		if (not widget.primary_model_code) return;
		
		OpDeclareFunction init_op_code = this.findFunction("initWidget");
		if (not init_op_code) return;
		
		/* Remove item */
		string widget_name = widget.getName();
		for (int i=init_op_code.items.items.count() - 1; i>=0; i--)
		{
			BaseOpCode op_code = init_op_code.items.items.get(i);
			if (op_code instanceof OpAssign and op_code.values.count() > 0)
			{
				OpAssignValue op_code_assign = op_code.values.get(0);
				if (static::isPrimaryCode(op_code_assign, widget_name))
				{
					init_op_code.items.items.remove(i);
				}
			}
		}
	}
	
	
	/**
	 * Add class model
	 */
	void removeClassModel(Widget widget)
	{
		OpDeclareClass model_class_op_code = this.code.findClass();
		if (not model_class_op_code) return null;
		
		/* Remove item */
		string widget_name = widget.getName();
		for (int i=model_class_op_code.items.count() - 1; i>=0; i--)
		{
			BaseOpCode op_code = model_class_op_code.items.get(i);
			if (op_code instanceof OpAssign and op_code.values.count() > 0)
			{
				OpAssignValue op_code_assign = op_code.values.get(0);
				if (op_code_assign.var_name == widget_name)
				{
					model_class_op_code.items.remove(i);
				}
			}
		}
	}
	
	
	/**
	 * Remove model
	 */
	void removeModel(Widget widget)
	{
		if (not widget.model_settings) return;
		this.removeClassModel(widget);
		this.removePrimaryCode(widget);
	}
}