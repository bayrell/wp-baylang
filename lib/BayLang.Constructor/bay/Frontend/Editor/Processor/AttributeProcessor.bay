/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor.Processor;

use Runtime.lib;
use Runtime.BaseObject;
use BayLang.Constructor.Frontend.Editor.WidgetEditPageModel;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpHtmlValue;
use BayLang.OpCodes.OpString;


class AttributeProcessor extends BaseObject
{
	WidgetEditPageModel page_model = null;
	int widget_inc = 1;
	int key_debug_inc = 1;
	
	
	/**
	 * Constructor
	 */
	public void constructor(WidgetEditPageModel page_model)
	{
		parent();
		this.page_model = page_model;
	}
	
	
	/**
	 * Create widget name
	 */
	string createWidgetName(string widget_name)
	{
		string name = widget_name ~ "_" ~ this.widget_inc;
		this.widget_inc = this.widget_inc + 1;
		return name;
	}
	
	
	/**
	 * Create key_debug name
	 */
	string createKeyName(string widget_name)
	{
		string name = widget_name ~ "_" ~ this.key_debug_inc;
		this.key_debug_inc = this.key_debug_inc + 1;
		return name;
	}
	
	
	/**
	 * Init widget inc
	 */
	void initWidgetInc()
	{
		this.widget_inc = this.key_debug_inc;
	}
	
	
	/**
	 * Generate widget name
	 */
	string generateWidgetName(string widget_name, string item)
	{
		if (rs::substr(item, 0, 2) != "[&") return widget_name;
		if (rs::substr(item, -1) != "]") return widget_name;
		item = rs::substr(item, 2, -1);
		return widget_name ~ item;
	}
	
	
	/**
	 * Add op_code tag attrs
	 */
	void processHtmlTag(OpHtmlTag op_code, string widget_name)
	{
		string css_name = null;
		
		/* Create widget name */
		fn createWidgetName = string () use (css_name)
		{
			if (css_name == null)
			{
				css_name = this.createWidgetName("widget");
			}
			return css_name;
		};
		
		/* Generate widget name */
		fn generateWidgetName = string(string item) use (widget_name)
		{
			widget_name = this.generateWidgetName(widget_name, item);
			return widget_name;
		}
		
		/* Add render key */
		OpHtmlAttribute key_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "@key")
		);
		OpHtmlAttribute key_debug_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "@key_debug")
		);
		if (key_attr == null and key_debug_attr == null)
		{
			/* Create key debug */
			string key_debug_value = this.createKeyName("widget");
			if (op_code.items)
			{
				BaseOpCode item = op_code.items.items.get(0);
				if (item instanceof OpHtmlValue and item.kind == "raw")
				{
					key_debug_value ~= "_raw";
				}
			}
			
			/* Add key debug */
			op_code.attrs.push(new OpHtmlAttribute{
				"key": "@key_debug",
				"value": new OpString{
					"value": key_debug_value,
				},
			});
		}
		
		/* Change widget name */
		OpHtmlAttribute class_name_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "class")
		);
		if (class_name_attr and class_name_attr.value instanceof OpString)
		{
			string class_name = class_name_attr.value.value;
			Collection attrs = rs::split(" ", class_name);
			attrs = attrs.filter(lib::equalNot(""));
			attrs = attrs.map(
				string (string item) use (createWidgetName, generateWidgetName)
				{
					if (item == "[widget_name]")
					{
						return createWidgetName();
					}
					if (rs::substr(item, 0, 2) == "[&" and rs::substr(item, -1) == "]")
					{
						return generateWidgetName(item);
					}
					return item;
				}
			);
			class_name_attr.value.value = rs::join(" ", attrs);
		}
	}
	
	
	/**
	 * Add op_code slot attrs
	 */
	void processHtmSlot(OpHtmlTag op_code, string widget_name)
	{
	}
	
	
	/**
	 * Generate html items attrs
	 */
	void processHtmlItems(Collection items, string widget_name = "")
	{
		if (not items) return;
		if (items instanceof OpHtmlItems) items = items.items;
		for (int i=0; i<items.count(); i++)
		{
			BaseOpCode item = items.get(i);
			
			/* Add render key to item */
			if (rtl::is_instanceof(item, classof OpHtmlTag))
			{
				this.processHtmlTag(item, widget_name);
			}
			else if (rtl::is_instanceof(item, classof OpHtmlSlot))
			{
				this.processHtmSlot(item, widget_name);
			}
			
			/* Generate html items attrs */
			this.processHtmlItems(item.items, widget_name);
		}
	}
}