/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Context;
use Runtime.Reference;
use Runtime.Serializer;
use Runtime.SerializerBase64;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.BasePageModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderProvider;
use Runtime.Web.Annotations.Widget;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.ContextMenu.ContextMenuMessage;
use Runtime.Widget.ContextMenu.ContextMenuModel;
use Runtime.Widget.Dialog.ConfirmDialogModel;
use Runtime.Widget.Dialog.DialogMessage;
use Runtime.Widget.Dialog.PromptDialogModel;
use Runtime.Widget.Tree.TreeItem;
use Runtime.Widget.Tree.TreeMessage;
use Runtime.Widget.Tree.TreeModel;
use BayLang.LangBay.TranslatorBay;
use BayLang.Constructor.Frontend.ConstructorHook;
use BayLang.Constructor.Frontend.Editor.Dialog.AddItemDialogModel;
use BayLang.Constructor.Frontend.Editor.Dialog.RemoveItemDialogModel;
use BayLang.Constructor.Frontend.Editor.Dialog.SelectImageDialogModel;
use BayLang.Constructor.Frontend.Editor.Processor.AttributeProcessor;
use BayLang.Constructor.Frontend.Editor.Processor.ComponentProcessor;
use BayLang.Constructor.Frontend.Editor.Processor.ModelProcessor;
use BayLang.Constructor.Frontend.Editor.Styles.StylesModel;
use BayLang.Constructor.Frontend.Editor.Widget.WidgetManager;
use BayLang.Constructor.Frontend.Editor.SelectedItemModel;
use BayLang.Constructor.Frontend.Editor.WidgetEditPage;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.Constructor.WidgetPage.EditorProvider;
use BayLang.Constructor.WidgetPage.WidgetPageModel;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.SaveOpCode;


class WidgetEditPageModel extends BasePageModel
{
	static const string STATUS_LOAD_PROCESS = 0;
	static const string STATUS_LOAD_SUCCESS = 1;
	static const string STATUS_LOAD_ERROR = 2;
	static const string STATUS_CHANGED = 3;
	static const string STATUS_SAVE_PROCESS = 4;
	static const string STATUS_SAVE_SUCCESS = 5;
	static const string STATUS_SAVE_ERROR = 6;
	
	/* Variables */
	string component = classof WidgetEditPage;
	string project_id = "";
	string module_id = "";
	string current_widget = "";
	string component_class_name = "";
	string menu_selected = "params";
	string iframe_current_size = "";
	string load_error_message = "";
	int app_status = static::STATUS_LOAD_PROCESS;
	int breadcrumbs_selected = -1;
	var iframe = null;
	
	/* Models */
	TreeModel tree = null;
	Widget main_widget = null;
	AttributeProcessor attribute_processor = new AttributeProcessor(this);
	ComponentProcessor component_processor = new ComponentProcessor(this);
	ModelProcessor model_processor = new ModelProcessor(this);
	WidgetManager widget_manager = new WidgetManager(this);
	SelectedItemModel selected = null;
	StylesModel styles = null;
	ContextMenuModel context_menu = null;
	AddItemDialogModel add_item_dialog = null;
	RemoveItemDialogModel remove_item_dialog = null;
	PromptDialogModel rename_item_dialog = null;
	SelectImageDialogModel select_image_dialog = null;
	
	
	/**
	 * Returns iframe window
	 */
	BaseModel getFrameWindow()
	{
		if (not this.isLoaded()) return null;
		if (not this.iframe) return null;
		if (not this.iframe.contentWindow) return null;
		return this.iframe.contentWindow;
	}
	
	
	/**
	 * Returns iframe layout
	 */
	BaseModel getFrameLayout()
	{
		if (not this.isLoaded()) return null;
		if (not this.iframe) return null;
		if (not this.iframe.contentWindow) return null;
		if (not this.iframe.contentWindow.app_layout) return null;
		return this.iframe.contentWindow.app_layout;
	}
	
	
	/**
	 * Returns page model
	 */
	BaseModel getFramePageModel()
	{
		var app_layout = this.getFrameLayout();
		if (not app_layout) return null;
		return app_layout.getPageModel();
	}
	
	
	/**
	 * Returns frame editor
	 */
	EditorProvider getFrameEditor()
	{
		var app_window = this.getFrameWindow();
		if (not app_window) return null;
		return app_window.global_context.provider(classof EditorProvider);
	}
	
	
	/**
	 * Returns widget frame page
	 */
	string getFramePageUrl()
	{
		string page_url = ConstructorHook::getFramePageUrl(this.project_id, this.current_widget);
		return page_url;
	}
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		this.layout.setLayoutName("default");
		this.project_id = this.layout.route.matches.get("project_id");
		this.module_id = this.layout.request_query.get("module_id");
		this.current_widget = this.layout.route.matches.get("widget_name");
		
		/* Create widgets */
		this.selected = this.addWidget(classof SelectedItemModel);
		this.styles = this.addWidget(classof StylesModel);
		
		/* Create Tree */
		this.tree = this.addWidget(classof TreeModel, {
			"dnd": true,
			"icons": false,
		});
		this.tree.addListener("canDrag", new Callback(this, "onCanTreeDrop"));
		this.tree.addListener("dragElement", new Callback(this, "onTreeDragElement"));
		this.tree.addListener("selectItem", new Callback(this, "onTreeSelectItem"));
		
		/* Add item dialog model */
		this.add_item_dialog = this.addWidget(classof AddItemDialogModel, {
			"widget_name": "add_item_dialog",
		});
		
		/* Remove item dialog model */
		this.remove_item_dialog = this.addWidget(classof RemoveItemDialogModel, {
			"widget_name": "remove_item_dialog",
		});
		
		/* Rename item dialog model */
		this.rename_item_dialog = this.addWidget(classof PromptDialogModel, {
			"widget_name": "rename_item_dialog",
			"confirm_button": "Rename",
			"title": "Rename name",
			"events": {
				"confirm": new Callback(this, "onRename")
			},
		});
		
		/* Select image dialog */
		this.select_image_dialog = this.addWidget(classof SelectImageDialogModel, {
			"widget_name": "select_image_dialog",
		});
		
		/* Create ContextMenu */
		this.context_menu = this.addWidget(classof ContextMenuModel);
		/*
		this.context_menu.addItem({
			"label": "Append item",
			"key": "append"
		});
		*/
		this.context_menu.addItem({
			"label": "Insert item",
			"key": "insert"
		});
		this.context_menu.addItem({
			"label": "Rename item",
			"key": "rename"
		});
		this.context_menu.addItem({
			"label": "Duplicate item",
			"key": "duplicate"
		});
		this.context_menu.addItem({
			"label": "Remove item",
			"key": "remove"
		});
		this.context_menu.addListener("clickItem", new Callback(this, "onContextClickItem"));
		this.tree.setContextMenu(this.context_menu);
		
		#ifcode JAVASCRIPT then
		window.addEventListener("message", (event) => { Vue.reactive(this).onPostMessage(event); });
		#endif
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.layout.setPageTitle(this.current_widget);
	}
	
	
	/**
	 * Load widget
	 */
	async void loadWidget()
	{
		ApiResult res = await this.layout.callApi({
			"api_name": "baylang.constructor.widget",
			"method_name": "getOpCode",
			"data": {
				"project_id": this.project_id,
				"current_widget": this.current_widget,
			}
		});
		
		if (res.isSuccess())
		{
			/* Setup op code */
			this.component_processor.setupOpCode(res.data.get("component"));
			this.model_processor.setupOpCode(res.data.get("model"));
			
			/* Setup CSS styles */
			this.styles.setupStyles(this.component_processor.code);
			
			/* Load iframe page */
			this.iframe.src = this.getFramePageUrl();
		}
		else
		{
			this.app_status = static::STATUS_LOAD_ERROR;
			this.load_error_message = res.message;
		}
	}
	
	
	/**
	 * Save widget
	 */
	async void saveWidget()
	{
		/*if (not this.isLoaded()) return;*/
		if (not this.component_processor.code) return;
		
		OpDeclareClass op_code_class = this.component_processor.code.findClass();
		if (not op_code_class) return;
		
		/* Update widget html styles op_code */
		for (int i=0; i<op_code_class.items.count(); i++)
		{
			BaseOpCode op_code = op_code_class.items.get(i);
			if (op_code instanceof OpHtmlStyle)
			{
				this.styles.updateHtmlStyle(op_code);
			}
		}
		
		/* Serialize component */
		Serializer serializer = new SerializerBase64();
		serializer.setFlag(Serializer::ALLOW_OBJECTS);
		string component = serializer.encode(this.component_processor.code);
		
		/* Serialize model */
		Serializer serializer = new SerializerBase64();
		serializer.setFlag(Serializer::ALLOW_OBJECTS);
		string model = serializer.encode(this.model_processor.code);
		
		/* Save content */
		this.app_status = static::STATUS_SAVE_PROCESS;
		ApiResult res = await this.layout.callApi({
			"api_name": "baylang.constructor.widget",
			"method_name": "save",
			"data": {
				"project_id": this.project_id,
				"current_widget": this.current_widget,
				"component": component,
				"model": model,
			}
		});
		
		/* Set result */
		if (res.isSuccess())
		{
			this.app_status = static::STATUS_SAVE_SUCCESS;
		}
		
		/* Set error */
		else
		{
			this.app_status = static::STATUS_SAVE_ERROR;
		}
	}
	
	
	/**
	 * Iframe loaded
	 */
	void onAppLoaded()
	{
		this.app_status = static::STATUS_LOAD_SUCCESS;
		
		/* Setup main widget */
		this.main_widget.setup();
		
		/* Setup tree root */
		this.tree.root = this.main_widget.tree_item;
	}
	
	
	/**
	 * App is changed
	 */
	void onAppChanged()
	{
		this.app_status = static::STATUS_CHANGED;
	}
	
	
	/**
	 * Convert widget_path to tree_path
	 */
	pure Collection<int> convertWidgetPath(string path)
	{
		if (not path) return null;
		return rs::split(".", path).map(int (string s) => rtl::toInt(s));
	}
	
	
	/**
	 * Post message event
	 */
	void onPostMessage(var event)
	{
		if (event.data.name == "app_loaded")
		{
			this.onAppLoaded();
		}
		else if (event.data.name == "add_widget")
		{
			this.showAddWidgetDialog(
				static::convertWidgetPath(event.data.path), event.data.kind
			);
		}
		else if (event.data.name == "move_widget")
		{
			this.moveWidget(static::convertWidgetPath(event.data.path), event.data.kind);
		}
		else if (event.data.name == "remove_widget")
		{
			this.showRemoveWidgetDialog();
		}
		else if (event.data.name == "select_item")
		{
			this.selectItem(static::convertWidgetPath(event.data.path));
		}
		else if (event.data.name == "context_menu")
		{
			this.onEditorContextMenuClick(event.data.x, event.data.y);
		}
	}
	
	
	/**
	 * Send message
	 */
	void sendMessage(Dict data)
	{
		var app_window = this.getFrameWindow();
		if (not app_window) return;
		app_window.postMessage(data.toObject());
	}
	
	
	/**
	 * Returns true if app is loaded
	 */
	bool isLoaded() => this.app_status > 0;
	
	
	/**
	 * Context menu item click
	 */
	void onContextClickItem(ContextMenuMessage message)
	{
		Dict item = message.item;
		string item_key = item.get("key");
		this.context_menu.hide();
		
		/* Add item */
		if (item_key == "append")
		{
			this.add_item_dialog.show(this.selected.path, "after");
		}
		
		/* Insert item */
		if (item_key == "insert")
		{
			this.add_item_dialog.show(this.selected.path, "last");
		}
		
		/* Rename item */
		if (item_key == "rename")
		{
			this.renameSelectedItem();
		}
		
		/* Duplicate item */
		if (item_key == "duplicate")
		{
			this.duplicateWidget(this.selected.path);
		}
		
		/* Remove item */
		if (item_key == "remove")
		{
			this.showRemoveWidgetDialog();
		}
	}
	
	
	/**
	 * Show add widget dialog
	 */
	void showAddWidgetDialog(Collection<int> selected_path, string kind)
	{
		this.add_item_dialog.show(selected_path, kind);
	}
	
	
	/**
	 * Show remove widget dialog
	 */
	void showRemoveWidgetDialog()
	{
		this.remove_item_dialog.title = "Remove item";
		this.remove_item_dialog.content = "Do you want to remove this item?";
		this.remove_item_dialog.show();
	}
	
	
	/**
	 * Select Frame size
	 */
	void selectIFrameSize(Dict size)
	{
		if (not this.isLoaded()) return;
		
		/* Select item */
		this.iframe_current_size = size.get("label");
		
		/* Set iframe width */
		int width = size.get("width");
		if (width > 1000)
		{
			this.iframe.style.width = "";
			this.iframe_current_size = "";
		}
		else
		{
			this.iframe.style.width = width ~ "px";
		}
		
		/* Update selected box */
		this.sendMessage({"name": "update_selected_box"});
	}
	
	
	/**
	 * Update render
	 */
	void updateFrameRender(string render_name = "render")
	{
		/* Set app is changed */
		this.onAppChanged();
		
		/* Build render */
		this.sendMessage({
			"name": "update_render",
			"render": render_name,
		});
	}
	
	
	/**
	 * Update global css
	 */
	void updateFrameGlobalCSS()
	{
		/* Set app is changed */
		this.onAppChanged();
		
		/* Build global css */
		this.sendMessage({"name": "update_global_css"});
	}
	
	
	/**
	 * Update css
	 */
	void updateFrameCSS()
	{
		/* Set app is changed */
		this.onAppChanged();
		
		/* Build CSS */
		this.sendMessage({"name": "update_css"});
	}
	
	
	/**
	 * Select item
	 */
	void onTreeSelectItem(TreeMessage message)
	{
		if (not this.isLoaded()) return null;
		if (this.selected.widget != null and (message.item == this.selected.widget.tree_item)) return;
		this.selectItem(message.path);
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(Collection<int> path)
	{
		this.breadcrumbs_selected = -1;
		this.context_menu.hide();
		
		/* Select item */
		this.selected.selectItem(path);
		
		/* Select tree */
		this.tree.selectItem(path);
		
		/* Select item in frame */
		this.sendMessage({
			"name": "select_item",
			"path": rs::join(".", path),
		});
	}
	
	
	/**
	 * Breadcrumbs
	 */
	void selectBreadcrumbs(int pos)
	{
		if (this.breadcrumbs_selected != pos)
		{
			this.breadcrumbs_selected = pos;
		}
		else
		{
			this.breadcrumbs_selected = -1;
		}
	}
	
	
	/**
	 * Context menu click
	 */
	void onEditorContextMenuClick(int x, int y)
	{
		var rect = this.iframe.getBoundingClientRect();
		x = x + rect.x;
		y = y + rect.y;
		this.context_menu.show(x, y);
	}
	
	
	/**
	 * Can Tree drop
	 */
	void onCanTreeDrop(TreeMessage message)
	{
		Widget src_widget = this.widget_manager.getWidget(message.src);
		Widget dest_widget = this.widget_manager.getWidget(message.dest);
		if (message.dest == null) return;
		if (dest_widget == null) return;
		
		/* Setup widget */
		if (dest_widget.is_initialized) dest_widget.setup();
		
		/* Check into drag */
		if (
			message.kind == "into" and
			not dest_widget.canInsert(src_widget.settings)
		)
		{
			message.result = false;
			return;
		}
	}
	
	
	/**
	 * Rename item
	 */
	void renameSelectedItem()
	{
		this.rename_item_dialog.old_value = this.selected.widget.param_widget_name.value;
		this.rename_item_dialog.setTitle("Rename " ~ this.rename_item_dialog.old_value);
		this.rename_item_dialog.setValue(this.rename_item_dialog.old_value);
		this.rename_item_dialog.show();
	}
	
	
	/**
	 * On rename item
	 */
	void onRename(DialogMessage message)
	{
		string old_widget_name = this.rename_item_dialog.old_value;
		string new_widget_name = message.value;
		if (old_widget_name == new_widget_name) return;
		
		string new_selector_name = new_widget_name;
		if (rs::charAt(new_selector_name, 0) != ".") new_selector_name = "." ~ new_selector_name;
		
		/* Rename widget */
		this.selected.widget.param_widget_name.changeValue(new_widget_name);
		
		/* Rename model name */
		if (this.selected.widget.is_model)
		{
			this.model_processor.setWidgetName(this.selected.widget, new_widget_name);
			
			/* Rename model */
			var iframe_page_model = this.getFramePageModel().widget_model;
			iframe_page_model.widgets.set(
				new_widget_name, iframe_page_model.widgets.get(old_widget_name)
			);
			iframe_page_model.widgets.remove(old_widget_name);
			#ifcode JAVASCRIPT then
			iframe_page_model[new_widget_name] = iframe_page_model[old_widget_name];
			iframe_page_model[old_widget_name] = null;
			#endif
		}
		
		/* Create new style */
		if (not this.styles.selectors.has(new_selector_name))
		{
			string old_selector_name = "." ~ old_widget_name;
			string css_content = this.styles.getSelectorContent(old_selector_name);
			this.styles.setSelectorContent(new_selector_name, css_content);
		}
		
		/* Update render */
		this.updateFrameCSS();
		this.updateFrameRender();
	}
	
	
	/**
	 * Move widget
	 */
	void moveWidget(Collection<int> path, string kind)
	{
		int dest_path_item = 0;
		string dest_path_kind = "";
		if (kind == "down")
		{
			dest_path_kind = "after";
			dest_path_item = path.last() + 1;
		}
		else if (kind == "up")
		{
			dest_path_kind = "before";
			dest_path_item = path.last() - 1;
		}
		
		Collection dest_path = path.setIm(path.count() - 1, dest_path_item);
		BaseOpCode src_op_code = this.widget_manager.getOpCode(path);
		BaseOpCode dest_op_code = this.widget_manager.getOpCode(dest_path);
		if (not dest_op_code) return;
		
		/* Move op code */
		this.widget_manager.moveOpCode(src_op_code, dest_op_code, dest_path_kind);
		this.selectItem(dest_path);
		
		/* Update frame render */
		this.updateFrameRender();
	}
	
	
	/**
	 * Add widget op_code
	 */
	void addOpCode(OpHtmlTag op_code, Collection<int> path, string kind)
	{
		BaseOpCode dest_op_code = this.widget_manager.getOpCode(path);
		
		/* Root insert */
		if (dest_op_code == null)
		{
			dest_op_code = this.tree.root.code;
			kind = "last";
			path = [];
		}
		
		/* Add op code */
		int pos = this.widget_manager.addOpCode(op_code, dest_op_code, kind);
		if (pos < 0) return;
		
		/* Build new path */
		Vector new_src_path = (kind == "first" or kind == "last")
			? path.slice()
			: path.slice(0, -1)
		;
		new_src_path.push(pos);
		
		/* Add model */
		Widget widget = this.widget_manager.getWidget(new_src_path);
		if (widget)
		{
			/* Setup widget */
			widget.setup();
			
			/* Create model op_code */
			this.model_processor.createModel(widget);
			
			/* Setup widget model */
			this.model_processor.setupWidget(widget);
			
			/* Add model widget */
			string content = this.model_processor.buildPrimaryContent(widget);
			if (content)
			{
				this.sendMessage({
					"name": "add_widget_model",
					"widget": widget.getName(),
					"content": content,
				});
			}
		}
		
		/* Select new item */
		this.selectItem(new_src_path);
		
		/* Update frame render */
		this.updateFrameRender();
		
		/* Update CSS */
		this.updateFrameCSS();
		
		/* Update Global CSS */
		this.updateFrameGlobalCSS();
		
		return new_src_path;
	}
	
	
	/**
	 * Duplicate selected widget
	 */
	void duplicateWidget(Collection<int> path)
	{
		/* Get op_code */
		BaseOpCode dest_op_code = this.widget_manager.getOpCode(path);
		if (not dest_op_code) return;
		
		/* Duplicate */
		this.widget_manager.duplicateOpCode(dest_op_code);
		
		/* Update frame render */
		this.updateFrameRender();
	}
	
	
	/**
	 * Remove widget
	 */
	void removeWidget(Collection<int> path, bool model = true)
	{
		if (path == null) return;
		
		/* Get op_code */
		BaseOpCode dest_op_code = this.widget_manager.getOpCode(this.selected.path);
		if (not dest_op_code) return;
		
		/* Remove model */
		if (model)
		{
			Widget widget = this.widget_manager.get(dest_op_code);
			if (widget) this.model_processor.removeModel(widget);
		}
		
		/* Remove */
		this.widget_manager.removeOpCode(dest_op_code);
		
		/* Set selected is null */
		this.selectItem(null);
		
		/* Update frame render */
		this.updateFrameRender();
	}
	
	
	/**
	 * Drag & Drop
	 */
	void onTreeDragElement(TreeMessage message)
	{
		string kind = message.kind;
		TreeItem dest_item = message.dest_item;
		TreeItem dest_parent_item = message.dest_parent_item;
		TreeItem src_item = message.src_item;
		TreeItem src_parent_item = message.src_parent_item;
		
		/* Move item */
		this.widget_manager.moveOpCode(src_item.code, dest_item.code, kind);
		
		/* Select new item */
		this.selectItem(message.new_src_path);
		
		/* Update frame render */
		this.updateFrameRender();
	}
}