/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor.Styles;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Web.BaseModel;
use BayLang.Constructor.Frontend.Editor.Styles.Styles;
use BayLang.Constructor.Frontend.Editor.Styles.Selector;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpModule;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpUse;


class StylesModel extends BaseModel
{
	string component = classof Styles;
	string widget_name = "styles";
	Dict<Selector> selectors = {};
	OpHtmlStyle main_style_code = null;
	
	
	/**
	 * Returns CSS content
	 */
	Collection<string> getCSS()
	{
		Vector items = [];
		Collection selectors = this.selectors.keys().sort();
		for (int i=0; i<selectors.count(); i++)
		{
			string selector_name = selectors.get(i);
			Selector item = this.selectors.get(selector_name);
			items.push(item.content);
		}
		return items;
	}
	
	
	/**
	 * Returns source
	 */
	pure string getCSSCode(string selector_name, string source)
	{
		return selector_name ~ "{" ~ source ~ "}";
	}
	
	
	/**
	 * Returns selector by selector name
	 */
	Selector getSelector(string selector_name)
	{
		if (not this.selectors.has(selector_name)) return null;
		return this.selectors.get(selector_name);
	}
	
	
	/**
	 * Returns selector content
	 */
	string getSelectorContent(string selector_name)
	{
		if (not this.selectors.has(selector_name)) return "";
		return this.selectors.get(selector_name).source;
	}
	
	
	/**
	 * Create style item
	 */
	Selector createSelector(string selector_name, OpHtmlStyle op_code = null)
	{
		if (op_code == null)
		{
			op_code = this.main_style_code;
		}
		Selector selector = new Selector();
		selector.op_code = op_code;
		selector.selector_name = selector_name;
		selector.parent_widget = this;
		this.selectors.set(selector_name, selector);
		return selector;
	}
	
	
	/**
	 * Set css content
	 */
	void setSelectorContent(string selector_name, string source, OpHtmlStyle op_code = null)
	{
		/* Default item */
		if (op_code == null)
		{
			op_code = this.main_style_code;
		}
		
		/* Create style item if does not exists */
		if (not this.selectors.has(selector_name))
		{
			this.createSelector(selector_name, op_code);
		}
		
		/* Set content */
		Selector selector = this.selectors.get(selector_name);
		selector.setContent(source);
	}
	
	
	/**
	 * Change css content
	 */
	void changeSelectorContent(string selector_name, string value)
	{
		/* Set CSS Value */
		this.setSelectorContent(selector_name, value);
		
		/* Update CSS */
		this.parent_widget.updateFrameCSS();
	}
	
	
	/**
	 * Clear styles
	 */
	void clear()
	{
		this.selectors = {};
	}
	
	
	/**
	 * Setup styles
	 */
	void setupStyles(OpModule op_code)
	{
		OpDeclareClass op_code_class = op_code.findClass();
		if (not op_code_class) return;
		
		/* Add styles */
		for (int i=0; i<op_code_class.items.count(); i++)
		{
			BaseOpCode item = op_code_class.items.get(i);
			if (item instanceof OpHtmlStyle)
			{
				this.addHtmlStyle(item);
			}
		}
		
		/* Add style if not exists */
		if (this.main_style_code == null)
		{
			this.createMainHtmlStyle(op_code);
		}
	}
	
	
	/**
	 * Create main HTML Style
	 */
	void createMainHtmlStyle(OpModule op_code)
	{
		if (this.main_style_code != null) return;
		
		OpDeclareClass op_code_class = op_code.findClass();
		if (not op_code_class) return;
		
		/* Create main style code */
		this.main_style_code = new OpHtmlStyle
		{
			"value": new OpString
			{
				"value": ""
			}
		};
		
		/* Find use */
		int pos = -1;
		for (int i=0; i<op_code.items.count(); i++)
		{
			if (op_code.items.get(i) instanceof OpUse) pos = i;
		}
		
		/* Register main style */
		op_code_class.items.add(this.main_style_code, pos);
	}
	
	
	/**
	 * Add HTML style
	 */
	void addHtmlStyle(OpHtmlStyle op_code)
	{
		if (this.main_style_code == null)
		{
			this.main_style_code = op_code;
		}
		
		Dict styles = op_code.readStyles();
		Collection arr = styles.keys();
		for (int i=0; i<arr.count(); i++)
		{
			string selector_name = arr.get(i);
			if (this.selectors.has(selector_name)) continue;
			
			/* Set CSS Value */
			string source = styles.get(selector_name);
			this.setSelectorContent(selector_name, source, op_code);
		}
	}
	
	
	/**
	 * Update HTML Style
	 */
	void updateHtmlStyle(OpHtmlStyle op_code)
	{
		/* Build style source */
		Vector source = [];
		Collection selectors = this.selectors.keys().sort();
		for (int i=0; i<selectors.count(); i++)
		{
			string selector_name = selectors.get(i);
			Selector selector = this.selectors.get(selector_name);
			if (selector.op_code != op_code) continue;
			
			/* Add content to source */
			source.push(selector_name ~ "{");
			Collection lines = rs::split("\n", selector.source);
			lines = lines.map(string (string s) => "\t" ~ s);
			source.appendItems(lines);
			source.push("}");
		}
		
		/* Set content to html style op_code */
		string content = rs::join("\n", source);
		op_code.content = content;
		if (op_code.value instanceof OpString)
		{
			op_code.value.value = content;
		}
	}
}