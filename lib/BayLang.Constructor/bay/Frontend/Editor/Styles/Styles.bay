<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="BayLang.Constructor.Frontend.Editor.Styles.Styles">

<use name="Runtime.Callback" />
<use name="Runtime.Widget.Button" component="true" />
<use name="Runtime.Widget.ButtonModel" />
<use name="Runtime.Widget.TextEditable" component="true" />
<use name="Runtime.Widget.Dialog.ConfirmDialogModel" />
<use name="Runtime.Widget.Dialog.DialogMessage" />
<use name="Runtime.Widget.Dialog.DialogModelException" />
<use name="Runtime.Widget.Dialog.PromptDialog" component="true" />
<use name="Runtime.Widget.Dialog.PromptDialogModel" />


<style>
.widget_styles{
}
.widget_styles__buttons{
	padding-bottom: 5px;
}
.widget_styles__items{
	border: 1px var(--widget-color-border) solid;
	border-bottom: 0px;
}
.widget_style__name{
	display: flex;
	padding: 5px;
	gap: 5px;
	background-color: aliceblue;
	border-bottom: 1px var(--widget-color-border) solid;
	width: 100%;
}
.widget_style__label{
	flex: 1;
	overflow-wrap: anywhere;
}
.widget_style__button{
	/*display: none;*/
	cursor: pointer;
	font-size: 12px;
}
.widget_style__button:hover{
	text-decoration: underline;
}
.widget_style__name:hover .widget_style__button{
	display: block;
}
.widget_style__content{
	padding: 5px;
	border-bottom: 1px var(--widget-color-border) solid;
}
.widget_style__editable{
	border: 0;
	padding: 10px;
}
</style>


<template name="renderStyle" args="string selector_name">
	<div class="widget_style" @key={{ selector_name }}>
		<div class="widget_style__name">
			<div class="widget_style__label">{{ selector_name }}</div>
			<div class="widget_style__button"
				@event:click={{ void () use (selector_name){ this.onEditClick(selector_name) } }}
			>[Edit]</div>
			<div class="widget_style__button"
				@event:click={{ void () use (selector_name){ this.onDeleteClick(selector_name) } }}
			>[Delete]</div>
		</div>
		<div class="widget_style__content">
			<TextEditable
				class="widget_style__editable overflow"
				name={{ selector_name }}
				value={{ this.model.getSelectorContent(selector_name) }}
				@event:valueChange={{ void (var message) use (selector_name) {
					this.model.changeSelectorContent(selector_name, message.value);
				} }}
			/>
		</div>
	</div>
</template>


<template>
	<div class="widget_styles">
		<div class="widget_styles__buttons">
			<Button styles=["small"]
				@event:click={{ this.onAddClick }}
			>Add</Button>
		</div>
		<div class="widget_styles__items">
			%set Collection<string> keys = this.model.selectors.keys().sort();
			%for (int i=0; i<keys.count(); i++)
			{
				%render this.renderStyle(keys.get(i));
			}
		</div>
		%render this.renderWidget(this.add_dialog);
		%render this.renderWidget(this.edit_dialog);
		%render this.renderWidget(this.delete_dialog);
	</div>
</template>


<script>

string old_selector_name = "";

/* Dialogs */
PromptDialogModel add_dialog = new PromptDialogModel{
	"widget_name": "add_dialog",
	"confirm_button": "Add",
	"title": "Add new style",
	"events": {
		"confirm": new Callback(this, "onAddStyle")
	},
};
PromptDialogModel edit_dialog = new PromptDialogModel{
	"widget_name": "edit_dialog",
	"confirm_button": "Rename",
	"title": "Rename style",
	"events": {
		"confirm": new Callback(this, "onRenameStyle")
	},
};
ConfirmDialogModel delete_dialog = new ConfirmDialogModel{
	"widget_name": "delete_dialog",
	"confirm_button": "Delete",
	"title": "Delete style",
	"events": {
		"confirm": new Callback(this, "onDeleteStyle")
	},
};


/**
 * Add dialog
 */
void onAddClick()
{
	this.add_dialog.setValue("");
	this.add_dialog.show();
}


/**
 * Edit click
 */
void onEditClick(string selector_name)
{
	this.old_selector_name = selector_name;
	this.edit_dialog.setTitle("Rename style " ~ selector_name);
	this.edit_dialog.setValue(selector_name);
	this.edit_dialog.show();
}


/**
 * Delete click
 */
void onDeleteClick(string selector_name)
{
	this.old_selector_name = selector_name;
	this.delete_dialog.setTitle("Delete style " ~ selector_name);
	this.delete_dialog.show();
}


/**
 * Add style
 */
void onAddStyle(DialogMessage message)
{
	string selector_name = message.value;
	if (rs::charAt(selector_name, 0) != ".") selector_name = "." ~ selector_name;
	if (this.model.selectors.has(selector_name))
	{
		throw new DialogModelException("selector " ~ selector_name ~ " allready exists");
	}
	this.model.changeSelectorContent(selector_name, "");
}


/**
 * Rename style
 */
void onRenameStyle(DialogMessage message)
{
	string new_selector_name = message.value;
	if (rs::charAt(new_selector_name, 0) != ".") new_selector_name = "." ~ new_selector_name;
	if (this.model.selectors.has(new_selector_name))
	{
		throw new DialogModelException(new_selector_name ~ " allready exists");
		return;
	}
	
	/* Rename style */
	string css_content = this.model.getSelectorContent(this.old_selector_name)
	this.model.selectors.remove(this.old_selector_name);
	this.model.changeSelectorContent(new_selector_name, css_content);
}


/**
 * Delete style
 */
void onDeleteStyle()
{
	this.model.changeSelectorContent(this.old_selector_name, "");
	this.model.selectors.remove(this.old_selector_name);
}


</script>


</class>