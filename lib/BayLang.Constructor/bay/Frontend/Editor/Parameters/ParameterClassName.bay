/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor.Parameters;

use Runtime.BaseObject;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterComponent;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterWidgetName;
use BayLang.Constructor.Frontend.Editor.Processor.CodeProcessor;
use BayLang.Constructor.Frontend.Editor.SelectedItemModel;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.OpCodes.OpHtmlAttribute;


class ParameterClassName extends ParameterComponent
{
	bool display = false;
	string name = "class_name";
	Collection<string> value = [];
	ParameterWidgetName param_widget_name = null;
	
	
	/**
	 * Is op_code
	 */
	void isOpCode(OpHtmlAttribute op_attr)
	{
		return op_attr.key == "class";
	}
	
	
	/**
	 * Set op_code
	 */
	void setOpCode(OpHtmlAttribute op_attr)
	{
		string class_name = CodeProcessor::getValueFromOpCode(op_attr.value);
		Collection<string> value = rs::split(" ", class_name);
		value = value.filter(bool (string s) => s != "");
		this.value = value.slice(1);
		this.op_attr = op_attr;
	}
	
	
	/**
	 * Set value
	 */
	void setValue(Collection<string> value)
	{
		/* Create html attribute */
		if (this.op_attr == null)
		{
			this.createHtmlAttribute();
		}
		
		/* Set value */
		Collection arr = [ this.param_widget_name.value ];
		arr.appendItems(value);
		this.value = arr.slice(1);
		this.op_attr.value = CodeProcessor::getOpCodeByValue(rs::join(" ", arr));
	}
}