/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor.Parameters;

use Runtime.lib;
use BayLang.Constructor.Frontend.Editor.Parameters.Parameter;
use BayLang.Constructor.Frontend.Editor.Processor.CodeProcessor;
use BayLang.Constructor.Frontend.Editor.Widget;
use BayLang.OpCodes.OpHtmlAttribute;


class ParameterComponent extends Parameter
{
	OpHtmlAttribute op_code = null;
	
    
	/**
	 * Is op_code
	 */
	void isOpCode(OpHtmlAttribute op_code)
	{
		return op_code instanceof OpHtmlAttribute and this.name == op_code.key;
	}
	
	
	/**
	 * Set op_code
	 */
	void setOpCode(OpHtmlAttribute op_code)
	{
		this.op_code = op_code;
		this.value = CodeProcessor::getValueFromOpCode(op_code.value);
	}
	
	
	/**
	 * Find code
	 */
	void findOpCode()
	{
		if (this.op_code != null) return;
		
		/* Find code */
		this.op_code = this.widget.code.attrs.findItem(lib::equalAttr("key", this.name));
	}
	
	
	/**
	 * Create attribute
	 */
	void createHtmlAttribute()
	{
		if (this.op_code != null) return;
		this.op_code = new OpHtmlAttribute
		{
			"key": this.name,
		};
		this.widget.code.attrs.prepend(this.op_code);
	}
	
	
	/**
	 * Remove attribute
	 */
	void removeHtmlAttribute()
	{
		if (this.op_code == null) return;
		
		/* Clear code */
		this.op_code = null;
		
		/* Remove attribute */
		int pos = this.widget.code.attrs.find(lib::equalAttr("key", this.name));
		if (pos >= 0)
		{
			this.widget.code.attrs.remove(pos);
		}
	}
	
	
	/**
	 * Set value
	 */
	void setValue(var value)
	{
		if (value === "")
		{
			this.removeHtmlAttribute();
			this.value = "";
			return;
		}
		
		/* Find item */
		this.findOpCode();
		
		/* Create html attribute */
		if (this.op_code == null)
		{
			this.createHtmlAttribute();
		}
		
		/* Set value */
		this.value = value;
		this.op_code.value = CodeProcessor::getOpCodeByValue(value);
	}
}