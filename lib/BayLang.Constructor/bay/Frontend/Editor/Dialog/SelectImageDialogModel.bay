/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor.Dialog;

use Runtime.Callback;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.RenderContainer;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.ContextMenu.ContextMenuMessage;
use Runtime.Widget.ContextMenu.ContextMenuModel;
use Runtime.Widget.Dialog.ConfirmDialogModel;
use BayLang.Constructor.Frontend.Editor.Dialog.SelectImageDialog;


class SelectImageDialogModel extends ConfirmDialogModel
{
	string component = classof SelectImageDialog;
	string title = "Select image";
	string width = "90%";
	string path = "";
	int selected = -1;
	Collection<Dict> items = [];
	ContextMenuModel context_menu = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Clear button */
		this.buttons.addButton({
			"content": "Clear",
			"widget_name": "clear_button",
			"dest": "cancel_button",
			"kind": "before",
			"styles": ["danger"],
			"events": {
				"click": new Callback(this, "onConfirmButtonClick"),
			},
		});
		
		/* Create ContextMenu */
		this.context_menu = this.addWidget(classof ContextMenuModel);
		this.context_menu.addItem({
			"label": "Delete",
			"key": "delete"
		});
		this.context_menu.addListener("clickItem", new Callback(this, "onContextClickItem"));
		
		/* Select button */
		ButtonModel confirm_button = this.buttons.getWidget("confirm_button");
		confirm_button.content = "Select";
	}
	
	
	/**
	 * Upload file
	 */
	async void uploadFile(var file)
	{
		ApiResult result = await this.layout.callApi({
			"api_name": "baylang.constructor.assets",
			"method_name": "uploadFile",
			"data": {
				"project_id": this.parent_widget.project_id,
				"path": "images",
				"file": file,
			}
		});
		if (result.isSuccess())
		{
			await this.loadItems();
		}
	}
	
	
	/**
	 * Load items
	 */
	async void loadItems()
	{
		ApiResult result = await this.layout.callApi({
			"api_name": "baylang.constructor.assets",
			"method_name": "getFiles",
			"data": {
				"project_id": this.parent_widget.project_id,
				"path": "images",
			}
		});
		if (result.isSuccess())
		{
			this.items = result.data.get("items");
			this.path = result.data.get("path");
		}
	}
	
	
	/**
	 * Load data
	 */
	async void loadData(RenderContainer container)
	{
		await this.loadItems();
		parent(container);
	}
	
	
	/**
	 * Process frontend data
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "items", data);
		serializer.process(this, "path", data);
		parent(serializer, data);
	}
	
	
	/**
	 * Context menu click
	 */
	void onContextClickItem(ContextMenuMessage message)
	{
		Dict item = message.item;
		string item_key = item.get("key");
		this.context_menu.hide();
		
		/* Delete item */
		if (item_key == "delete")
		{
			this.removeSelectedItem();
		}
	}
	
	
	/**
	 * Clear button click
	 */
	void onConfirmButtonClick(ClickMessage message)
	{
		if (message.widget.widget_name == "confirm_button")
		{
			if (this.selected == -1)
			{
				return;
			}
		}
		else if (message.widget.widget_name == "clear_button")
		{
			this.value = "";
			this.selected = -1;
		}
		parent(message);
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(int i)
	{
		this.selected = i;
	}
	
	
	/**
	 * Context menu
	 */
	void contextMenu(int x, int y)
	{
		this.context_menu.show(x, y);
	}
	
	
	/**
	 * Returns selected item
	 */
	Dict getSelectedItem() => this.items.get(this.selected);
	
	
	/**
	 * Remove selected item
	 */
	async void removeSelectedItem()
	{
		Dict item = this.getSelectedItem();
		ApiResult result = await this.layout.callApi({
			"api_name": "baylang.constructor.assets",
			"method_name": "removeFile",
			"data": {
				"project_id": this.parent_widget.project_id,
				"path": "images",
				"file_name": item.get("file_name"),
			}
		});
		if (result.isSuccess())
		{
			this.items.remove(this.selected);
			this.selectItem(-1);
		}
	}
	
	
	/**
	 * Show dialog
	 */
	void show()
	{
		this.selected = -1;
		this.loadItems();
		parent();
	}
}