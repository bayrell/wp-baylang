/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor.Dialog;

use Runtime.lib;
use Runtime.Callback;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Dialog.DialogModel;
use BayLang.Constructor.Frontend.Annotations.WidgetSettingsInterface;
use BayLang.Constructor.Frontend.Editor.Dialog.AddItemDialog;
use BayLang.Constructor.Frontend.Editor.CodeModel;
use BayLang.Constructor.Frontend.Editor.Widget;
use BayLang.Constructor.WidgetPage.EditorProvider;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlTag;


class AddItemDialogModel extends DialogModel
{
	string component = classof AddItemDialog;
	string widget_name = "add_item_dialog";
	string kind = "after";
	string width = "700px";
	string selected_group_name = "basic";
	Collection<Dict> current_groups = [];
	Collection<WidgetSettingsInterface> current_widgets = [];
	
	/* Selected item */
	Widget selected_widget = null;
	Collection<int> selected_widget_path = null;
	Dict selected_widget_info = null;
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Setup close buttons */
		this.buttons.addButton({
			"content": "Cancel",
			"widget_name": "cancel_button",
			"styles": [
				"gray"
			],
			"events": {
				"click": new Callback(this, "onCloseButtonClick"),
			},
		});
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(WidgetSettingsInterface widget_settings)
	{
		EditorProvider editor = this.parent_widget.getFrameEditor();
		
		/* Create widget name */
		string default_widget_name = widget_settings.getSelectorName();
		string widget_name_value = this.parent_widget.attribute_processor
			.createWidgetName(default_widget_name);
		
		/* Create widget */
		OpHtmlTag op_code = this.parent_widget.component_processor.createWidget(
			widget_settings, widget_name_value
		);
		this.parent_widget.addOpCode(op_code, this.selected_widget_path, this.kind);
		this.hide();
	}
	
	
	/**
	 * Add close button click
	 */
	void onCloseButtonClick(ClickMessage message)
	{
		this.hide();
	}
	
	
	/**
	 * Returns widget label
	 */
	string getTagWidgetInfo(OpHtmlTag op_code)
	{
		OpHtmlAttribute class_name_attr = op_code.attrs.findItem(
			lib::equalAttr("key", "class")
		);
		if (not class_name_attr)
		{
			return
			{
				"label": op_code.tag_name,
				"tag_name": op_code.tag_name,
				"class_name": "",
				"widget_name": "",
			};
		};
		
		string class_name = class_name_attr.value.value;
		Collection attrs = rs::split(" ", class_name);
		attrs = attrs.filter(lib::equalNot(""));
		return
		{
			"label": op_code.tag_name ~ "." ~ attrs.first(),
			"tag_name": op_code.tag_name,
			"class_name": class_name,
			"widget_name": attrs.first(),
		};
	}
	
	
	/**
	 * Update frame widgets
	 */
	void updateFrameWidgets()
	{
		/* Update selected widget */
		Widget selected_widget = this.selected_widget;
		if (this.kind == "before" or this.kind == "after")
		{
			Collection selected_widget_path = this.selected_widget_path.slice(0, -1);
			selected_widget = this.parent_widget.widget_manager
				.getWidget(selected_widget_path);
		}
		
		/* Setup widget */
		selected_widget.setup();
		
		/* Get editor provider */
		EditorProvider editor = this.parent_widget.getFrameEditor();
		
		/* Update widgets */
		Collection<WidgetSettingsInterface> widgets = editor.getWidgets();
		this.current_widgets = widgets.filter(
			bool (WidgetSettingsInterface widget_settings) use (selected_widget)
			{
				if (not widget_settings.getComponentName()) return false;
				if (not selected_widget.canInsert(widget_settings)) return false;
				return true;
			}
		);
		
		/* Get groups used */
		Dict groups = {};
		this.selected_group_name = "";
		for (int i=0; i<this.current_widgets.count(); i++)
		{
			string group_name = this.current_widgets.get(i).getGroupName();
			groups.set(group_name, 1);
			if (this.selected_group_name == "")
			{
				this.selected_group_name = group_name;
			}
		}
		
		/* Update groups */
		this.current_groups = [];
		Collection group_settings = editor.getGroups();
		for (int i=0; i<group_settings.count(); i++)
		{
			Dict group = group_settings.get(i);
			string group_name = group.get("name");
			if (groups.has(group_name))
			{
				this.current_groups.push(group);
			}
		}
	}
	
	
	/**
	 * Show dialog
	 */
	void show(Collection<string> selected_path = null, string kind = "after")
	{
		this.step = 1;
		this.kind = kind;
		this.title = "Add item";
		
		/* If selected_path is main widget */
		if (not selected_path)
		{
			this.kind = "last";
		}
		
		/* Setup selected widget */
		this.selected_widget_path = selected_path ? selected_path.slice() : [];
		this.selected_widget = this.parent_widget.widget_manager
			.getWidget(this.selected_widget_path)
		;
		
		/* Update widgets list */
		this.updateFrameWidgets();
		parent();
	}
}