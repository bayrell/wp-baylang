<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="BayLang.Constructor.Frontend.Editor.WidgetEditPage">

<use name="BayLang.Constructor.Frontend.CSS" component="true" />
<use name="BayLang.Constructor.Frontend.Editor.Breadcrumbs" component="true" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetEditPageModel" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetMenu" component="true" />


<style>
.index_page{
	display: flex;
	flex-direction: column;
	height: 100vh;
}
.widget_edit_page__menu{
	display: flex;
	justify-content: flex-start;
	border-bottom: 1px var(--widget-color-border) solid;
}
.widget_edit_page__menu--right{
	justify-content: right;
}
.widget_edit_page__menu_item{
	cursor: pointer;
	user-select: none;
	padding: 10px;
}
.widget_edit_page__menu_item--button{
	text-align: center;
	min-width: 40px;
}
.widget_edit_page__menu_item--error{
	color: var(--widget-color-danger);
}
.widget_edit_page__menu_item--select_size{
	display: flex;
	padding: 0px;
	.widget_edit_page__iframe_size{
		display: flex;
		justify-content: center;
		align-items: center;
		width: 40px;
		padding: 10px;
	}
	.widget_edit_page__iframe_size.selected{
		background-color: var(--widget-color-primary);
		color: var(--widget-color-primary-text);
	}
}
.widget_edit_page__menu_item--selected{
	background-color: var(--widget-color-primary);
	color: var(--widget-color-primary-text);
}
.widget_edit_page__menu_item_gap{
	display: flex;
	flex: 1;
}
.widget_edit_page__content{
	display: flex;
	flex: 1;
	height: calc(100vh - 41px);
}
.widget_edit_page__frame{
	display: flex;
	flex-direction: column;
	justify-content: stretch;
	align-items: stretch;
	width: calc(100% - 300px);
	position: relative;
	padding: 0px;
	flex: 1;
}
.widget_edit_page__frame_wrap{
	display: flex;
	justify-content: center;
	flex: 1;
}
.widget_edit_page__frame iframe{
	border-style: none;
	overflow: visible;
	width: 100%;
}
</style>


<style global="true">
.scroll-lock{ overflow: hidden; padding-right: 0px; }
</style>


<template name="renderSelectSize">
	<div class="widget_edit_page__menu_item widget_edit_page__menu_item--select_size">
		%for (int i=0; i<this.model.iframe_sizes.count(); i++)
		{
			%set Dict size = this.model.iframe_sizes.get(i);
			<div class="widget_edit_page__iframe_size"
				class={{ this.model.iframe_current_size == size.get("label") ? "selected" : "" }}
				@event:click={{
					void () use (size)
					{
						this.model.selectIFrameSize(size);
					}
				}}
			>{{ size.get("label") }}</div>
		}
	</div>
</template>


<template name="renderMenu">
	<div class="widget_edit_page__menu">
		<div class="widget_edit_page__menu_item_gap">
			<a class="widget_edit_page__menu_item nolink"
				href={{ this.layout.url(
					"baylang:project:widgets",
					{
						"project_id": this.model.project_id,
						"module_id": this.model.module_id,
					}
				) }}>Back</a>
			<div class="widget_edit_page__menu_item"
				@event:onClick={{
					void(var e){ this.model.saveWidget(); }
				}}
			>Save</div>
			<div class="widget_edit_page__menu_item">Export</div>
			<div class="widget_edit_page__menu_item widget_edit_page__menu_item--status_message"
				class={{ this.isAppStatusError() ? "widget_edit_page__menu_item--error" : "" }}
			>
				{{ this.getAppStatusMessage() }}
			</div>
		</div>
		<!-- %render this.renderSelectSize(); -->
		<div class="widget_edit_page__menu_item_gap widget_edit_page__menu--right">
			%for (int i=0; i<this.menu_items.count(); i++)
			{
				%set Dict item = this.menu_items.get(i);
				<div class="widget_edit_page__menu_item widget_edit_page__menu_item--button"
				class={{
					this.model.menu_selected == item.get("value")
					? "widget_edit_page__menu_item--selected"
					: ""
				}}
				@event:onClick={{
					void(var e) use (item){ this.toggleMenu(e, item.get("value")); }
				}}>{{ item.get("label") }}</div>
			}
		</div>
	</div>
</template>


<template name="renderContent">
	<div class="widget_edit_page__content">
		<div class="widget_edit_page__frame">
			<Breadcrumbs @model={{ this.model }} />
			<div class="widget_edit_page__frame_wrap">
				<iframe @ref="iframe"></iframe>
			</div>
		</div>
		<WidgetMenu @model={{ this.model }} />
		%render this.renderWidget(this.model.add_item_dialog);
		%render this.renderWidget(this.model.context_menu);
		%render this.renderWidget(this.model.remove_item_dialog);
		%render this.renderWidget(this.model.rename_item_dialog);
		%render this.renderWidget(this.model.select_image_dialog);
	</div>
</template>


<template>
	<div class="widget_edit_page">
		%render this.renderMenu();
		%render this.renderContent();
	</div>
</template>


<script>

Collection<string> menu_items = [
	{"label": "Styles", "value": "styles"},
	{"label": "CSS", "value": "css"},
	{"label": "Params", "value": "params"},
	{"label": "Tree", "value": "tree"},
];


/**
 * Returns true if app status is error
 */
bool isAppStatusError()
{
	if (this.model.app_status == WidgetEditPageModel::STATUS_LOAD_ERROR) return true;
	if (this.model.app_status == WidgetEditPageModel::STATUS_SAVE_ERROR) return true;
	return false;
}


/**
 * Returns app status message
 */
string getAppStatusMessage()
{
	if (this.model.app_status == WidgetEditPageModel::STATUS_LOAD_PROCESS) return "Loading...";
	if (this.model.app_status == WidgetEditPageModel::STATUS_LOAD_SUCCESS) return "Loaded";
	if (this.model.app_status == WidgetEditPageModel::STATUS_LOAD_ERROR)
	{
		return this.model.load_error_message;
	}
	if (this.model.app_status == WidgetEditPageModel::STATUS_CHANGED) return "";
	if (this.model.app_status == WidgetEditPageModel::STATUS_SAVE_PROCESS) return "Saving...";
	if (this.model.app_status == WidgetEditPageModel::STATUS_SAVE_SUCCESS) return "Saved";
	if (this.model.app_status == WidgetEditPageModel::STATUS_SAVE_ERROR) return "Save error";
	return "";
}


/**
 * Toggle property
 */
void toggleMenu(var e, string name)
{
	if (this.model.menu_selected != name)
	{
		this.model.menu_selected = name;
	}
	else
	{
		this.model.menu_selected = "";
	}
	this.nextTick(void(){
		var page_model = this.model.getFramePageModel();
		if (page_model) page_model.updateSelectedBox();
	});
	e.preventDefault();
	e.stopPropagation();
	return false;
}


/**
 * Mounted
 */
void onMounted()
{
	var iframe = this.getRef("iframe");
	var iframe_window = iframe.contentWindow;
	var iframe_document = iframe.contentDocument;
	
	/* Setup iframe */
	this.model.iframe = iframe;
	
	/* Load widget */
	this.model.loadWidget();
}

</script>


</class>