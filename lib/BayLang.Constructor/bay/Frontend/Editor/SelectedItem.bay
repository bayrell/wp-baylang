<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="BayLang.Constructor.Frontend.Editor.SelectedItem">

<use name="Runtime.Callback" />
<use name="Runtime.Widget.Button" component="true" />
<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.Select" component="true" />
<use name="Runtime.Widget.Tag" component="true" />
<use name="Runtime.Widget.TextArea" component="true" />
<use name="Runtime.Widget.TextEditable" component="true" />
<use name="Runtime.Widget.WidgetSettings.Settings.ContainerSettings" />
<use name="BayLang.Constructor.Frontend.Components.SelectImageButton" component="true" />
<use name="BayLang.Constructor.Frontend.Components.SortableParams" component="true" />
<use name="BayLang.Constructor.Frontend.Editor.Parameters.Parameter" />
<use name="BayLang.Constructor.Frontend.Editor.Styles.Selector" />
<use name="BayLang.Constructor.Frontend.Editor.Styles.StyleItem" />
<use name="BayLang.Constructor.Frontend.Editor.Widget.Widget" />
<use name="BayLang.Constructor.Frontend.Editor.Widget.WidgetTag" />
<use name="BayLang.Constructor.Frontend.Editor.WidgetStyle" component="true" />
<use name="BayLang.Constructor.Frontend.Providers.EditorProvider" />
<use name="BayLang.Constructor.WidgetPage.WidgetSettingsInterface" />


<style>
.widget_param{
	padding-bottom: 20px;
}
.widget_param__row{
	margin-bottom: 10px;
}
.widget_param__label{
	margin-bottom: 5px;
}
.widget_param__title{
	margin-bottom: 5px;
}
.widget_param__text{
	display: flex;
	gap: 10px;
}
.widget_param__text_label{
	overflow-wrap: anywhere;
}
.widget_param__text_button{
	cursor: pointer;
}
.widget_param__text_button:hover{
	text-decoration: underline;
}
.widget_param %(Select)widget_select{
	padding: 7px;
	min-height: 37px;
}
.widget_param %(Input)widget_input,
.widget_param %(TextArea)widget_textarea{
	padding: 7px;
}
.widget_param %(TextArea)widget_textarea{
	font-family: 'PT Mono';
	line-height: 1.5;
}
.widget_css__label{
	text-align: center;
	background-color: aliceblue;
	padding: 5px;
	margin-bottom: 5px;
}
.widget_css__row{
	display: flex;
	align-items: center;
	margin-bottom: 5px;
}
.widget_css__key{
	width: 100px;
}
.widget_css__value{
	width: calc(100% - 100px);
}
</style>


<template name="renderInput" args="
	Selector selector, string key,
	string label, string default_value = ''"
>
	%set string value = this.getCSSValue(selector, key, default_value);
	<div class="widget_css__row">
		<div class="widget_css__key">{{ label ? label : key }}</div>
		<div class="widget_css__value">
			<Input value={{ value }}
				@event:valueChange={{
					void (var message) use (selector, key)
					{
						this.setCSSValue(selector, key, message.value);
					}
				}}
			/>
		</div>
	</div>
</template>


<template name="renderSelect" args="
	Selector selector, string key,
	string label, Collection options"
>
	%set string value = this.getCSSValue(selector, key);
	<div class="widget_css__row">
		<div class="widget_css__key">{{ label ? label : key }}</div>
		<div class="widget_css__value">
			<Select
				value={{ value }}
				options={{ options }}
				@event:valueChange={{
					void (var message) use (selector, key)
					{
						this.setCSSValue(selector, key, message.value);
					}
				}}
			/>
		</div>
	</div>
</template>


<template name="renderSelectImage" args="Selector selector, string key, string label">
	%set string value = this.getCSSValue(selector, key);
	<div class="widget_css__row">
		<div class="widget_css__key">{{ label ? label : key }}</div>
		<div class="widget_css__value">
			<SelectImageButton
				@event:valueChange={{
					void (var message) use (selector, key)
					{
						this.setCSSValue(selector, key, message.value);
					}
				}}
			/>
		</div>
	</div>
</template>


<template name="renderComponentName">
	<div class="widget_param__row">
		<div class="widget_param__label">Component</div>
		<div class="widget_param__content">
			{{ this.model.selected.widget.code.tag_name }}
		</div>
	</div>
</template>


<template name="renderWidgetName">
	<div class="widget_param__row">
		<div class="widget_param__label">
			<div class="widget_param__text">
				<div class="widget_param__text_label">
					Name
				</div>
				<div class="widget_param__text_button"
					@event:click={{ void ()
					{
						this.model.renameSelectedItem();
					} }}
				>
					[Edit]
				</div>
			</div>
		</div>
		<div class="widget_param__content">
			{{ this.model.selected.widget.param_widget_name.value }}
		</div>
	</div>
</template>


<template name="renderClassName">
	<div class="widget_param__row">
		<div class="widget_param__label">Class</div>
		<div class="widget_param__content">
			<Tag value={{ this.model.selected.widget.param_class_name.value.slice() }}
				@event:valueChange={{ void (var message) {
					this.model.selected.widget.param_class_name.changeValue(message.value);
					this.model.updateFrameRender();
				} }}
			/>
		</div>
	</div>
</template>


<template name="renderParams">
	%for (int i=0; i<this.model.selected.widget.params.count(); i++)
	{
		%set Parameter param = this.model.selected.widget.params.get(i);
		%if (param.display)
		{
			%set Dict item_props = param.props;
			%set string class_name = param.component;
			<div class="widget_param__row">
				<div class="widget_param__label">{{ param.label }}</div>
				<div class="widget_param__content">
					%if (this.isAllowClassName(class_name))
					{
						<{class_name}
							value={{ param.value }}
							@event:valueChange={{ void (var message) use (param) {
								param.changeValue(message.value);
								this.model.updateFrameRender();
							} }}
							...item_props
						/>
					}
				</div>
			</div>
		}
	}
</template>


<template name="renderStyles">
	%set WidgetSettingsInterface settings = this.model.selected.widget.settings;
	%set Selector selector = this.model.selected.widget.getSelector();
	<div class="widget_css__content">
		<div class="widget_css__label">Common</div>
		<div class="widget_css__items">
			%render this.renderInput(selector, "width", "");
			%render this.renderInput(selector, "height", "");
			%render this.renderInput(selector, "min-width", "");
			%render this.renderInput(selector, "min-height", "");
		</div>
	</div>
	%if (settings and this.isContainer(settings))
	{
		<div class="widget_css__content">
			<div class="widget_css__label">Flex</div>
			<div class="widget_css__items">
				%render this.renderSelect(selector, "display", "", [
					{"key": "block", "value": "block"},
					{"key": "flex", "value": "flex"},
				]);
				%render this.renderSelect(selector, "align-items", "", [
					{"key": "baseline", "value": "baseline"},
					{"key": "center", "value": "center"},
					{"key": "end", "value": "end"},
					{"key": "flex-end", "value": "flex-end"},
					{"key": "flex-start", "value": "flex-start"},
					{"key": "start", "value": "start"},
					{"key": "stretch", "value": "stretch"},
					{"key": "revert", "value": "revert"},
				]);
				%render this.renderSelect(selector, "justify-content", "", [
					{"key": "left", "value": "left"},
					{"key": "center", "value": "center"},
					{"key": "right", "value": "right"},
					{"key": "space-around", "value": "space-around"},
					{"key": "space-between", "value": "space-between"},
					{"key": "start", "value": "start"},
					{"key": "stretch", "value": "stretch"},
					{"key": "end", "value": "end"},
				]);
				%render this.renderSelect(selector, "flex-wrap", "", [
					{"key": "nowrap", "value": "nowrap"},
					{"key": "wrap", "value": "wrap"},
				]);
				%render this.renderInput(selector, "gap", "");
			</div>
		</div>
	}
	<div class="widget_css__content">
		<div class="widget_css__label">Padding</div>
		<div class="widget_css__items">
			%render this.renderInput(selector, "padding-top", "");
			%render this.renderInput(selector, "padding-bottom", "");
			%render this.renderInput(selector, "padding-left", "");
			%render this.renderInput(selector, "padding-right", "");
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">Margin</div>
		<div class="widget_css__items">
			%render this.renderInput(selector, "margin-top", "");
			%render this.renderInput(selector, "margin-bottom", "");
			%render this.renderInput(selector, "margin-left", "");
			%render this.renderInput(selector, "margin-right", "");
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">Font</div>
		<div class="widget_css__items">
			%render this.renderInput(selector, "color", "");
			%render this.renderInput(selector, "font-size", "");
			%render this.renderSelect(selector, "font-weight", "", [
				{"key": "light", "value": "lighter"},
				{"key": "normal", "value": "normal"},
				{"key": "bold", "value": "bold"},
				{"key": "bolder", "value": "bolder"},
				{"key": "100", "value": "100"},
				{"key": "200", "value": "200"},
				{"key": "300", "value": "300"},
				{"key": "400", "value": "400"},
				{"key": "500", "value": "500"},
				{"key": "600", "value": "600"},
				{"key": "700", "value": "700"},
				{"key": "800", "value": "800"},
				{"key": "900", "value": "900"},
			]);
			%render this.renderSelect(selector, "text-align", "", [
				{"key": "left", "value": "left"},
				{"key": "center", "value": "center"},
				{"key": "right", "value": "right"},
				{"key": "justify", "value": "justify"},
			]);
			%render this.renderSelect(selector, "text-transform", "", [
				{"key": "capitalize", "value": "capitalize"},
				{"key": "lowercase", "value": "lowercase"},
				{"key": "uppercase", "value": "uppercase"},
				{"key": "inherit", "value": "inherit"},
				{"key": "none", "value": "none"},
			]);
			%render this.renderInput(selector, "line-height", "");
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">Border</div>
		<div class="widget_css__items">
			%render this.renderInput(selector, "border-color", "");
			%render this.renderSelect(selector, "border-style", "", [
				{"key": "dashed", "value": "dashed"},
				{"key": "dotted", "value": "dotted"},
				{"key": "double", "value": "double"},
				{"key": "hidden", "value": "hidden"},
				{"key": "inset", "value": "inset"},
				{"key": "none", "value": "none"},
				{"key": "outset", "value": "outset"},
				{"key": "solid", "value": "solid"},
				{"key": "inherit", "value": "inherit"},
				{"key": "unset", "value": "unset"},
			]);
			%render this.renderInput(selector, "border-width", "");
			%render this.renderInput(selector, "border-radius", "");
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">Background</div>
		<div class="widget_css__items">
			%render this.renderInput(selector, "background-color", "Color");
			%render this.renderSelectImage(selector, "background-image", "Image");
			%render this.renderInput(selector, "background-position", "Position");
			%render this.renderSelect(selector, "background-repeat", "Repeat", [
				{"key": "repeat", "value": "repeat"},
				{"key": "repeat-x", "value": "repeat-x"},
				{"key": "repeat-y", "value": "repeat-y"},
				{"key": "no-repeat", "value": "no-repeat"},
			]);
			%render this.renderSelect(selector, "background-size", "Size", [
				{"key": "contain", "value": "contain"},
				{"key": "cover", "value": "cover"},
			]);
		</div>
	</div>
	<div class="widget_css__content">
		<div class="widget_css__label">CSS</div>
		<div class="widget_css__items">
			%render this.renderCSS();
		</div>
	</div>
</template>


<template name="renderCSS">
	%set string selector_name = this.model.selected.widget.getSelectorName();
	<TextEditable class="overflow"
		value={{ this.model.styles.getSelectorContent(selector_name) }}
		@event:valueChange={{ void (var message) use (selector_name) {
			this.model.styles.changeSelectorContent(selector_name, message.value)
		} }}
	/>
</template>


<template>
	<div class="widget_param">
		%if (this.model.selected.widget)
		{
			<!-- Render info -->
			%render this.renderComponentName();
			%render this.renderWidgetName();
			%render this.renderClassName();
			
			<!-- Render css -->
			%if (this.type == "css")
			{
				%render this.renderStyles();
			}
			
			<!-- Render params -->
			%if (this.type == "params")
			{
				%render this.renderParams();
			}
		}
	</div>
</template>


<script>

props string type = "params";
string current_tab = "params";
Collection<string> tabs_items = [
	{"key": "Params", "value": "params"},
	{"key": "Styles", "value": "styles"},
	{"key": "CSS", "value": "css"},
];


/**
 * Returns true if class name is allowed
 */
bool isAllowClassName(string class_name)
{
	if (class_name == "Runtime.Widget.Input") return true;
	if (class_name == "Runtime.Widget.Select") return true;
	if (class_name == "Runtime.Widget.SortableList") return true;
	if (class_name == "Runtime.Widget.Tag") return true;
	if (class_name == "Runtime.Widget.TextArea") return true;
	if (class_name == "Runtime.Widget.TextEditable") return true;
	if (class_name == "BayLang.Constructor.Frontend.Components.SelectImageButton") return true;
	if (class_name == "BayLang.Constructor.Frontend.Components.SortableParams") return true;
	return false;
}


/**
 * Returns true if widget is container
 */
bool isContainer(WidgetSettingsInterface settings)
{
	if (not settings) return false;
	var iframe_window = this.model.getFrameWindow();
	return iframe_window.Runtime.rtl.is_instanceof(
		settings, "Runtime.Widget.WidgetSettings.Settings.ContainerSettings"
	);
}


/**
 * Returns css value
 */
string getCSSValue(Selector selector, string key, string default_value = "")
{
	if (selector == null) return default_value;
	StyleItem value = selector.getStyle(key);
	return value ? value.getValue() : default_value;
}


/**
 * Set css value
 */
void setCSSValue(Selector selector, string key, string value = "")
{
	if (not selector)
	{
		string selector_name = this.model.selected.widget.getSelectorName();
		selector = this.model.styles.createSelector(selector_name);
	}
	selector.changeStyleValue(key, value);
}


</script>


</class>