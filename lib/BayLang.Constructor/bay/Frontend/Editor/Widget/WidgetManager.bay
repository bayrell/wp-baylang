/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Frontend.Editor.Widget;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.Serializer;
use Runtime.HashMap;
use BayLang.Constructor.Frontend.Editor.Widget.Widget;
use BayLang.Constructor.Frontend.Editor.Widget.WidgetMain;
use BayLang.Constructor.Frontend.Editor.WidgetEditPageModel;
use BayLang.Constructor.Frontend.Editor.WidgetTreeItem;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlTag;


class WidgetManager extends BaseObject
{
	WidgetEditPageModel page_model = null;
	HashMap<BaseOpCode, Widget> hash = new HashMap;
	
	
	/**
	 * Constructor
	 */
	public void constructor(WidgetEditPageModel page_model)
	{
		parent();
		this.page_model = page_model;
	}
	
	
	/**
	 * Returns widget by op_code
	 */
	Widget get(BaseOpCode op_code) => this.hash.has(op_code) ? this.hash.get(op_code) : null;
	
	
	/**
	 * Get op_code by path
	 */
	BaseOpCode getOpCode(Collection<int> path)
	{
		WidgetTreeItem item = this.page_model.tree.root.get(path);
		return item ? item.code : null;
	}
	
	
	/**
	 * Get widget by path
	 */
	Widget getWidget(Collection<int> path)
	{
		BaseOpCode op_code = this.getOpCode(path);
		return op_code ? this.hash.get(op_code) : null;
	}
	
	
	/**
	 * Add op_code
	 */
	public Widget add(BaseOpCode op_code)
	{
		if (not op_code) return null;
		
		/* Add widget to hash */
		if (not this.hash.has(op_code))
		{
			Widget widget = Widget::newInstance(this.page_model, op_code);
			this.hash.set(op_code, widget);
		}
		
		/* Setup widget */
		Widget widget = this.hash.get(op_code);
		if (not widget) return widget;
		
		widget.updateTreeItem();
		return widget;
	}
	
	
	
	/**
	 * Add main op_code
	 */
	public Widget addMain(BaseOpCode op_code)
	{
		if (not op_code) return null;
		
		/* Add widget to hash */
		if (not this.hash.has(op_code))
		{
			Widget widget = new WidgetMain(this.page_model, op_code);
			this.hash.set(op_code, widget);
		}
		
		/* Setup widget */
		Widget widget = this.hash.get(op_code);
		widget.updateTreeItem();
		
		/* Update items */
		this.updateItems(op_code);
		
		return widget;
	}
	
	
	/**
	 * Update op_code items
	 */
	public Widget updateItems(BaseOpCode op_code, bool recursive = true)
	{
		if (not op_code) return null;
		
		/* Add widget */
		Widget widget = this.add(op_code);
		if (not widget) return null;
		
		/* Get op_code items */
		OpHtmlItems op_code_items = op_code.items;
		if (op_code_items == null) return widget;
		if (op_code_items.items == null) return widget;
		
		/* Clear tree items */
		widget.tree_item.items = [];
		
		/* Add op_code items */
		for (int i=0; i<op_code_items.items.count(); i++)
		{
			BaseOpCode new_op_code = op_code_items.items.get(i);
			Widget new_widget = this.add(new_op_code);
			if (new_widget)
			{
				/* Set new parent code */
				new_widget.parent_code = op_code;
				
				/* Add tree item */
				widget.tree_item.items.push(new_widget.tree_item);
			}
			if (recursive) this.updateItems(new_op_code);
		}
		
		return widget;
	}
	
	
	/**
	 * Remove op_code
	 */
	public void remove(BaseOpCode op_code)
	{
		if (not this.hash.has(op_code)) return;
		
		/* Remove op_code */
		this.hash.remove(op_code);
	}
	
	
	/**
	 * Remove op_code with items
	 */
	public void removeItems(BaseOpCode op_code, bool recursive = true)
	{
		Widget widget = this.get(op_code);
		if (not widget) return;
		
		/* Get op_code items */
		OpHtmlItems op_code_items = op_code.items;
		if (op_code_items == null) return;
		if (op_code_items.items == null) return;
		
		/* Clear tree items */
		widget.tree_item.items = [];
		
		/* Remove widget items */
		for (int i=0; i<op_code_items.items.count(); i++)
		{
			BaseOpCode op_code_item = op_code_items.items.get(i);
			this.remove(op_code_item);
			if (recursive) this.removeItems(op_code_item);
		}
	}
	
	
	/**
	 * Add new op_code to dest
	 */
	int addOpCode(BaseOpCode new_op_code, BaseOpCode dest_op_code, string kind)
	{
		/* Get widgets */
		Widget dest_widget = this.hash.get(dest_op_code);
		Widget parent_widget = this.hash.get(dest_widget.parent_code);
		
		/* Insert first */
		if (kind == "first")
		{
			parent_widget = dest_widget;
			dest_op_code = null;
			kind = "before";
		}
		
		/* Insert last */
		else if (kind == "last")
		{
			parent_widget = dest_widget;
			dest_op_code = null;
			kind = "after";
		}
		
		/* Check widget exists */
		if (not parent_widget) return -1;
		
		/* Add item */
		int pos = parent_widget.code.items.items.addItem(new_op_code, dest_op_code, kind);
		
		/* Update items */
		this.add(new_op_code);
		this.updateItems(new_op_code);
		this.updateItems(parent_widget.code, false);
		
		return pos;
	}
	
	
	/**
	 * Move op_code
	 */
	void moveOpCode(BaseOpCode src_op_code, BaseOpCode dest_op_code, string kind)
	{
		/* Get widgets */
		Widget src_widget = this.hash.get(src_op_code);
		Widget dest_widget = this.hash.get(dest_op_code);
		if (not src_widget) return;
		if (not dest_widget) return;
		
		/* Get parent widget */
		Widget parent_src_widget = this.hash.get(src_widget.parent_code);
		Widget parent_dest_widget = this.hash.get(dest_widget.parent_code);
		if (not parent_src_widget) return;
		if (not dest_widget) return;
		
		/* Insert into */
		if (kind == "into")
		{
			parent_dest_widget = dest_widget;
			dest_op_code = null;
			dest_widget = null;
		}
		
		/* Remove code */
		parent_src_widget.code.items.items.removeItem(src_op_code);
		this.updateItems(parent_src_widget.code, false);
		
		/* Add widget */
		if (not parent_dest_widget.code.items) parent_dest_widget.code.items = new OpHtmlItems;
		if (not parent_dest_widget.code.items.items) parent_dest_widget.code.items.items = [];
		parent_dest_widget.code.items.items.addItem(src_op_code, dest_op_code, kind);
		
		/* Update items */
		this.updateItems(parent_dest_widget.code, false);
	}
	
	
	/**
	 * Duplicate op_code
	 */
	int duplicateOpCode(BaseOpCode dest_op_code)
	{
		/* Get widgets */
		Widget dest_widget = this.hash.get(dest_op_code);
		Widget parent_widget = this.hash.get(dest_widget.parent_code);
		if (not dest_widget) return;
		if (not parent_widget) return;
		
		/* Duplicate op_code */
		OpHtmlTag new_op_code = Serializer::copy(dest_op_code);
		Widget new_widget = this.add(new_op_code);
		
		/* Remove key debug */
		int attr_pos = new_op_code.attrs.find(
			lib::equalAttr("key", "@key_debug")
		);
		if (attr_pos >= 0)
		{
			new_op_code.attrs.remove(attr_pos);
		}
		
		/* Process op_code */
		this.page_model.attribute_processor.processHtmlTag(new_op_code, "");
		
		/* Add new item */
		int pos = parent_widget.code.items.items.addItem(new_op_code, dest_op_code, "after");
		
		/* Update items */
		this.updateItems(new_op_code, true);
		this.updateItems(parent_widget.code, false);
		
		return pos;
	}
	
	
	/**
	 * Remove op_code with items
	 */
	void removeOpCode(BaseOpCode dest_op_code)
	{
		/* Get widgets */
		Widget dest_widget = this.hash.get(dest_op_code);
		Widget parent_widget = this.hash.get(dest_widget.parent_code);
		if (not dest_widget) return;
		if (not parent_widget) return;
		
		/* Remove op_code */
		parent_widget.code.items.items.removeItem(dest_op_code);
		
		/* Remove tree item */
		parent_widget.tree_item.items.removeItem(dest_widget.tree_item);
		
		/* Remove item */
		this.remove(dest_op_code);
		this.removeItems(dest_op_code);
	}
}