/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.File;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.BaseApi;
use Runtime.Web.Annotations.ApiMethod;
use BayLang.Constructor.Backend.ApiHook;
use BayLang.Helper.Project;


class AssetsApi extends BaseApi
{
	Project project;
	
	
	/**
	 * Returns api name
	 */
	static string getApiName() => "baylang.constructor.assets";
	
	
	/**
	 * Action before
	 */
	async void onActionBefore()
	{
		/* Get project */
		string project_id = this.post_data.get("project_id");
		this.project = await ApiHook::getProject(project_id);
		if (not this.project)
		{
			throw new ApiError(new ItemNotFound(project_id, "Project"));
		}
		
		/* Load project */
		await this.project.load();
	}
	
	
	/**
	 * Upload file
	 */
	@ApiMethod
	async void uploadFile()
	{
		File file = this.post_data.get("file");
		if (not file)
		{
			throw new ApiError(new RuntimeException("File not found"));
		}
		
		/* Get path */
		string assets_path = ApiHook::getAssetsPath(this.project);
		string folder_name = this.post_data.get("path");
		string folder_path = fs::join([assets_path, folder_name]);
		string file_upload_path = fs::join([folder_path, file.getName()]);
		
		/* Create folder */
		if (not await fs::exists(folder_path))
		{
			await fs::mkdir(folder_path);
		}
		
		/* Create file */
		string content = await fs::readFile(file.getPath());
		await fs::saveFile(file_upload_path, content);
		
		/* Result */
		this.success({
			"data":
			{
				"path": fs::join([folder_name, file.getName()]),
			}
		});
	}
	
	
	/**
	 * Remove file
	 */
	@ApiMethod
	async void removeFile()
	{
		string assets_path = ApiHook::getAssetsPath(this.project);
		string file_name = this.post_data.get("file_name");
		string file_path = fs::join([assets_path, "images", file_name]);
		
		/* Check file path */
		if (not await fs::exists(file_path))
		{
			throw new ApiError(new ItemNotFound(file_name, "File"));
		}
		
		/* Remove file */
		await fs::unlink(file_path);
		
		/* Result */
		this.success({
			"data":
			{
				"file_name": file_name,
			}
		});
	}
	
	
	/**
	 * Returns files
	 */
	@ApiMethod
	async void getFiles()
	{
		string assets_path = ApiHook::getAssetsPath(this.project);
		string assets_url_path = ApiHook::getAssetsUrlPath(this.project);
		string folder_name = this.post_data.get("path");
		string folder_path = fs::join([assets_path, folder_name]);
		
		/* Check file path */
		if (rs::indexOf(folder_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(folder_name, "Folder"));
		}
		
		/* File not exists */
		if (not await fs::isFolder(folder_path))
		{
			throw new ApiError(new ItemNotFound(folder_name, "Folder"));
		}
		
		/* Get items */
		Collection items = [];
		Collection<string> files = await fs::listDir(folder_path);
		for (int i=0; i<files.count(); i++)
		{
			string item_name = files.get(i);
			string item_path = fs::join([folder_path, item_name]);
			string item_kind = "";
			
			if (await fs::isFile(item_path)) item_kind = "file";
			else if (await fs::isDir(item_path)) item_kind = "dir";
			
			items.push({
				"kind": item_kind,
				"file_name": item_name,
				"file_path": fs::join([folder_name, item_name]),
				"url": fs::join([assets_url_path, folder_name, item_name]),
			});
		}
		
		/* Result */
		this.success({
			"data":
			{
				"items": items,
				"path": folder_name,
			}
		});
	}
}