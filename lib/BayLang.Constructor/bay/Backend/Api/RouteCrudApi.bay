/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.Required;
use BayLang.Helper.Module;
use BayLang.Helper.Project;


class RouteCrudApi extends CrudApi
{
	/**
	 * Returns api name
	 */
	pure string getApiName() => "admin.constructor.route::crud";
	
	
	/**
	 * Returns item fields
	 */
	Vector getItemFields() =>
	[
		"id",
	];
	
	
	/**
	 * Returns save fields
	 */
	Vector getSaveFields() => [
	];
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Required{ "name": "name" },
		new Required{ "name": "url" },
	];
	
	
	/**
	 * Convert item
	 */
	Map convertItem(Collection fields, Dict item)
	{
		return {
			"name": item.get("name"),
			"url": item.get("uri"),
			"model": item.get("model"),
		};
	}
	
	
	/**
	 * Returns item primary key
	 */
	Map getItemPrimaryKey(Dict item) => {
		"name": item.get("name"),
	};
	
	
	/**
	 * Search items
	 */
	async void searchItems()
	{
		this.page = 1;
		this.items = [];
		
		string module_path = @.env("module_path");
		string project_path = @.env("project_path");
		this.project = await Project::readProject(project_path);
		if (not this.project)
		{
			throw new ApiError( new ItemNotFound(project_path, "Project") );
		}
		
		/* Load project */
		await this.project.load();
		
		/* Add routes */
		if (this.project.modules != null)
		{
			Collection<string> modules = this.project.modules.keys();
			for (int i=0; i<modules.count(); i++)
			{
				string module_name = modules.get(i);
				Module module = this.project.modules.get(module_name);
				if (module.path != module_path) continue;
				if (not module.routes) continue;
				this.items.appendItems(module.routes);
			}
			this.items = this.items.sort();
		}
	}
	
	
	/**
	 * Find item by primary key
	 */
	async void findItem(Dict pk)
	{
		if (pk == null) return;
		
		string module_id = pk.get("id");
		string project_id = this.post_data.get("project_id");
		this.project = await Project::readProject(
			fs::join(["/data/constructor/projects", project_id])
		);
		
		if (not this.project) return;
	}
	
	
	/**
	 * Create new relation
	 */
	async var newRelation()
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
	
	
	/**
	 * Update item
	 */
	async void updateItem(Map update_data)
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		await parent();
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		await parent();
	}
	
	
	/**
	 * Action delete
	 */
	@ApiMethod
	async void actionDelete()
	{
		throw new ApiError(new RuntimeException("Method not allowed"));
	}
}