/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.lib;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.SaveApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.Required;
use BayLang.Constructor.Backend.ApiHook;
use BayLang.Helper.Project;


class ProjectSaveApi extends SaveApi
{
	/**
	 * Returns api name
	 */
	static string getApiName() => "baylang.constructor.project::save";
	
	
	/**
	 * Returns rules
	 */
	Vector<CrudRule> getRules() =>
	[
		new Required{"name": "name"},
		new Required{"name": "template", "check_update": false},
	];
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() =>
	[
		"id",
		"name",
		"description",
	];
	
	
	/**
	 * Returns save fields
	 */
	Collection getSaveFields() =>
	[
		"name",
		"description",
	];
	
	
	/**
	 * New item
	 */
	async void newItem() => new Project(null);
	
	
	/**
	 * Find item
	 */
	async void findItem(Dict pk)
	{
		string project_id = pk.get("id");
		return await ApiHook::getProject(project_id);
	}
	
	
	/**
	 * Reload cache
	 */
	@ApiMethod
	async void reloadCache()
	{
		/* Load data */
		await this.loadItem(false);
		
		/* Project path */
		string project_path = this.item.getPath();
		string cache_path = fs::join([project_path, ".cache"]);
		
		/* Remove cache */
		#ifcode PHP then
		shell_exec("rm -rf $cache_path");
		#endif
		
		/* Load project */
		await this.item.load();
		
		/* Success */
		this.success();
	}
	
	
	/**
	 * Action item
	 */
	@ApiMethod
	async void actionItem()
	{
		/* Load data */
		await this.loadItem(false);
		
		/* Get domains */
		Collection<string> domains = [];
		if (this.item.info.has("domains"))
		{
			domains = this.item.info.get("domains");
		}
		
		/* Success */
		this.success({
			"data":
			{
				"item":
				{
					"id": this.item.getID(),
					"name": this.item.getName(),
					"description": this.item.getDescription(),
					"domains": domains,
				},
			},
		});
	}
	
	
	/**
	 * Action save
	 */
	@ApiMethod
	async void actionSave()
	{
		/* Load data */
		await this.loadItem();
		await this.loadData();
		
		/* Set project info */
		if (this.data.has("name"))
		{
			this.item.setName(this.data.get("name"));
		}
		if (this.data.has("description"))
		{
			this.item.setDescription(this.data.get("description"));
		}
		if (this.data.has("domains"))
		{
			this.item.info.set("domains", this.data.get("domains"));
		}
		
		/* Save project */
		await this.item.saveInfo();
		
		/* Success */
		this.success();
	}
}