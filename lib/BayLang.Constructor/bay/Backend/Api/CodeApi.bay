/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Constructor.Backend.Api;

use Runtime.fs;
use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.BaseApi;
use Runtime.Web.Annotations.ApiMethod;
use BayLang.Constructor.Backend.ApiHook;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.Helper.Module;
use BayLang.Helper.Project;


class CodeApi extends BaseApi
{
	Project project;
	
	
	/**
	 * Returns api name
	 */
	static string getApiName() => "baylang.constructor.code";
	
	
	/**
	 * Action before
	 */
	async void onActionBefore()
	{
		/* Get project */
		string project_id = this.post_data.get("project_id");
		this.project = await ApiHook::getProject(project_id);
		if (not this.project)
		{
			throw new ApiError(new ItemNotFound(project_id, "Project"));
		}
		
		/* Load project */
		await this.project.load();
	}
	
	
	/**
	 * Returns files
	 */
	@ApiMethod
	async void getFiles()
	{
		string file_path = this.post_data.get("file_path");
		string project_path = this.project.getPath();
		string folder_path = fs::join([project_path, file_path]);
		
		/* Check file path */
		if (rs::indexOf(folder_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(file_path, "Folder"));
		}
		
		/* File not exists */
		if (not await fs::isFolder(folder_path))
		{
			throw new ApiError(new ItemNotFound(file_path, "Folder"));
		}
		
		/* Get items */
		Collection items = [];
		Collection<string> files = await fs::listDir(folder_path);
		for (int i=0; i<files.count(); i++)
		{
			string item_name = files.get(i);
			string item_path = fs::join([folder_path, item_name]);
			string item_kind = "";
			
			if (await fs::isFile(item_path)) item_kind = "file";
			else if (await fs::isDir(item_path)) item_kind = "dir";
			
			items.push({
				"kind": item_kind,
				"file_name": item_name,
				"file_path": fs::join([file_path, item_name]),
			});
		}
		
		/* Result */
		this.success({
			"data":
			{
				"items": items,
			}
		});
	}
	
	
	/**
	 * Returns file content
	 */
	@ApiMethod
	async void getContent()
	{
		string file_path = this.post_data.get("file_path");
		string project_path = this.project.getPath();
		string file_full_path = fs::join([project_path, file_path]);
		
		/* Check file path */
		if (rs::indexOf(file_full_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(file_path, "Folder"));
		}
		
		/* File not exists */
		if (not await fs::isFile(file_full_path))
		{
			throw new ApiError(new ItemNotFound(file_path, "File"));
		}
		
		/* Read file */
		string content = await fs::readFile(file_full_path);
		
		/* Result */
		this.success({
			"data":
			{
				"file_path": file_path,
				"content": content,
			}
		});
	}
	
	
	/**
	 * Create
	 */
	@ApiMethod
	async void create()
	{
		string project_path = this.project.getPath();
		string parent_dir = this.post_data.get("file_path");
		string file_name = this.post_data.get("file_name");
		string file_full_path = fs::join([project_path, parent_dir, file_name]);
		string kind = this.post_data.get("kind");
		
		/* Check file path */
		if (rs::indexOf(file_full_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(fs::join([parent_dir, file_name]), "Folder"));
		}
		
		/* Create folder */
		if (kind == "dir" or kind == "folder")
		{
			await fs::mkDir(file_full_path);
		}
		
		/* Create file */
		else
		{
			await fs::saveFile(file_full_path, "");
		}
		
		this.success();
	}
	
	
	/**
	 * Rename
	 */
	@ApiMethod
	async void rename()
	{
		string project_path = this.project.getPath();
		string file_path = this.post_data.get("file_path");
		string file_new_name = this.post_data.get("file_new_name");
		string parent_dir = rs::dirname(file_path);
		string file_full_path = fs::join([project_path, file_path]);
		string file_new_path = fs::join([project_path, parent_dir, file_new_name]);
		
		/* Check file path */
		if (rs::indexOf(file_full_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(file_path, "Folder"));
		}
		
		/* Check file path */
		if (rs::indexOf(file_new_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(file_new_name, "Folder"));
		}
		
		await fs::rename(file_full_path, file_new_path);
		this.success();
	}
	
	
	/**
	 * Remove file
	 */
	@ApiMethod
	async void remove()
	{
		string project_path = this.project.getPath();
		string file_path = this.post_data.get("file_path");
		string file_full_path = fs::join([project_path, file_path]);
		
		/* Check file path */
		if (rs::indexOf(file_full_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(file_path, "Folder"));
		}
		
		/* Remove file */
		if (await fs::isFile(file_full_path))
		{
			await fs::unlink(file_full_path);
		}
		
		/* Remove folder */
		else if (await fs::isFolder(file_full_path))
		{
			#ifcode PHP then
			shell_exec("rm -rf $file_full_path");
			#endif
		}
		
		this.success();
	}
	
	
	/**
	 * Move file
	 */
	@ApiMethod
	async void move()
	{
		string project_path = this.project.getPath();
		string file_path = this.post_data.get("file_path");
		string dest_path = this.post_data.get("dest_path");
		string kind = this.post_data.get("kind");
		
		/* Get file name */
		string file_name = rs::basename(file_path);
		
		/* Full path */
		string file_full_path = fs::join([project_path, file_path]);
		string dest_full_path = fs::join([project_path, dest_path]);
		
		/* Check file path */
		if (rs::indexOf(file_full_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(file_path, "Folder"));
		}
		
		/* Check dest path */
		if (rs::indexOf(dest_full_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(dest_path, "Folder"));
		}
		
		/* Copy */
		if (kind == "copy")
		{
			if (await fs::isFile(file_full_path))
			{
				#ifcode PHP then
				shell_exec("cp $file_full_path $dest_full_path");
				#endif
			}
			else
			{
				#ifcode PHP then
				shell_exec("cp -r $file_full_path $dest_full_path");
				#endif
			}
		}
		
		/* Move file */
		else
		{
			dest_full_path = fs::join([dest_full_path, file_name]);
			await fs::rename(file_full_path, dest_full_path);
		}
		
		this.success();
	}
	
	
	/**
	 * Save file
	 */
	@ApiMethod
	async void saveContent()
	{
		string file_path = this.post_data.get("file_path");
		string project_path = this.project.getPath();
		string file_full_path = fs::join([project_path, file_path]);
		
		/* Check file path */
		if (rs::indexOf(file_full_path, "/..") != -1)
		{
			throw new ApiError(new ItemNotFound(file_path, "Folder"));
		}
		
		/* Read file */
		string content = this.post_data.get("content");
		await fs::saveFile(file_full_path, content);
		
		/* Compile file */
		Module module = this.project.findModuleByFileName(file_full_path);
		if (module)
		{
			/* Init module */
			await module.init();
			
			/* Compile file */
			string relative_src_file_path = module.getRelativeSourcePath(file_full_path);
			if (relative_src_file_path)
			{
				bool is_allow = module.checkAllow(relative_src_file_path);
				bool is_exclude = module.checkExclude(relative_src_file_path);
				if (is_allow and not is_exclude)
				{
					try
					{
						await module.compile(relative_src_file_path);
						await module.updateAssets();
					}
					catch (ParserUnknownError e)
					{
						string error_str = e.getErrorMessage();
						string line = e.getErrorLine();
						string pos = e.getErrorPos();
						if (line != -1)
						{
							error_str ~= " at Ln:" ~ line ~ ( (pos != "") ? ", Pos:" ~ pos : "" );
						}
						throw new ApiError(new RuntimeException(error_str));
					}
				}
			}
		}
		
		/* Result */
		this.success({
			"data":
			{
				"file_path": file_path,
			}
		});
	}
}