/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.XML.Test;

use Runtime.io;
use Runtime.Unit.Test;
use Runtime.XML.XML;


class XmlTest
{
	/**
	 * Assert xml
	 */
	static void assertEqualXml(string message, XML xml1, string xml2, bool log_xml = true)
	{
		string s1 = xml1.toString({ 'indent': false, 'output-xml': true });
		s1 = rs::replace("\n", "", s1);
		s1 = rs::replace("\t", "", s1);
		s1 = rs::lower(s1);
		
		string s2 = rs::replace("\n", "", xml2);
		s2 = rs::replace("\t", "", s2);
		s2 = rs::lower(s2);
		
		if (s1 != s2 and log_xml)
		{
			io::print(
				xml1.toString()
			);
		}
		
		rtl::assert(s1 == s2, message);
	}
	
	
	@Test{}
	static void testLoadXml()
	{
		XML xml = XML::loadXml(
			'<?xml version="1.0" encoding="UTF-8" ?>
			<root>
				<item1>1</item1>
				<item2>2</item2>
				<item3><aa>3</aa></item3>
				<test>123</test>
			</root>'
		);
		
		/* Check load xml */
		rtl::assert(xml != null, "XML is null");
		rtl::assert(xml instanceof XML, "XML load error");
		rtl::assert(xml.exists(), "XML does not exists");
		
		/* Check item1 */
		rtl::assert(xml.get("item1").count() == 1, "Item1 count is not correct");
		rtl::assert(xml.get("item1").get(0).value() == "1", "Item1 value is not correct");
		
		/* Check item2 */
		rtl::assert(xml.get("item2").count() == 1, "Item2 count is not correct");
		rtl::assert(xml.get("item2").get(0).value() == "2", "Item2 value is not correct");
		
		/* Check name */
		rtl::assert(xml.getName() == "root", "Root is not correct");
	}
	
	
	@Test{}
	static void testChilds()
	{
		XML xml = XML::loadXml(
			'<root>
				<item>1</item>
				<item>2</item>
				<item><aa>3</aa></item>
				<test>123</test>
			</root>'
		);
		
		rtl::assert(xml.get("item").count() == 3, "Wrong count items");
		rtl::assert(xml.get("item").get(2).get("aa").get(0).value() == "3", "Wrong item content");
		rtl::assert(xml.get("test").get(0).value() == "123", "Wrong test value");
	}
	
	
	@Test{}
	static void testIncorrect()
	{
		XML xml = XML::loadXml('<root></root2>');
		rtl::assert(not xml.exists(), "Incorrect XML test failed");
	}
	
	
	@Test{}
	static void testVersion_1_1()
	{
		XML xml = XML::loadXml('<?xml version="1.1" encoding="UTF-8" ?><root></root>');
		rtl::assert(xml.exists(), "Incorrect XML test failed");
	}
	
	
	@Test{}
	static void testCountZero()
	{
		XML xml = XML::loadXml(
			'<root>
				<item></item>
			</root>'
		);
		rtl::assert(xml.get('item').get(0).count() == 0, "Count must be zero");
	}
	
	
	@Test{}
	static void testCountOne()
	{
		XML xml = XML::loadXml(
			'<root>
				<item>
					<subitem>1</subitem>
				</item>
			</root>'
		);
		rtl::assert(xml.get('item').get(0).count() == 1, "Count must be one");
	}
	
	
	@Test{}
	static void testCountTwo()
	{
		XML xml = XML::loadXml(
			'<root>
				<item>
					<subitem1>1</subitem1>
					<subitem2>2</subitem2>
				</item>
			</root>'
		);
		rtl::assert(xml.get('item').get(0).count() == 2, "Count must be two");
	}
	
	
	@Test{}
	static void testAttributes1()
	{
		XML xml = XML::loadXml(
			'<root>
				<item name="name1" test="123">content</item>
			</root>'
		);
		
		Map attrs = xml.get('item').get(0).attributes();		
		rtl::assert(attrs.get("name") == "name1", "Attribute 'name' is not correct");
		rtl::assert(attrs.get("test") == "123", "Attribute 'test' is not correct");
		rtl::assert(attrs.keys().count() == 2, "Count attributes must be two");
	}
	
	
	@Test{}
	static void testAttributes2()
	{
		XML xml = XML::loadXml(
			'<root>
				<item name="name1" test="123">content</item>
			</root>'
		);
		
		XML item = xml.get('item').get(0);		
		
		item.removeAttr("test");
		
		rtl::assert(item.attr("name") == "name1", "Attribute 'name' is not correct");
		rtl::assert(item.attr("test") == null, "Attribute 'test' is not correct");
		rtl::assert(item.attributes().keys().count() == 1, "Count attributes must be one");
		
		item.addAttr("color", "white");
		
		rtl::assert(item.attr("color") == "white", "Attribute 'color' is not correct");
		rtl::assert(item.attributes().keys().count() == 2, "Count attributes must be two");
	}
	
	
	@Test{}
	static void testRemoveItem()
	{
		XML xml = XML::loadXml(
			'<?xml version="1.0" encoding="UTF-8"?>
			<root>
				<item>1</item>
				<item>2</item>
				<item>3</item>
			</root>'
		);
		
		xml.get('item').get(2).remove();
		
		XmlTest::assertEqualXml(
			'Remove xml item error',
			xml,
			'<?xml version="1.0" encoding="UTF-8"?>
			<root>
				<item>1</item>
				<item>2</item>
			</root>'
		);
	}
	
	
	@Test{}
	static void testEmptyItem()
	{
		XML xml = XML::loadXml(
			'<root>
				<item></item>
			</root>'
		);
		rtl::assert(xml.get('item').get(0).getName() == "item", "Wrong item");
	}
	
}