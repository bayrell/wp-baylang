/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.XML;

use Runtime.lib;
use Runtime.BaseProvider;
use Runtime.XML.BasePatcher;
use Runtime.XML.XMLPatcher;


class PatcherProvider extends BaseProvider
{
	Map patchers = new Map();
	
	
	/**
	 * Start provider
	 */
	async void start()
	{
		Collection<XMLPatcher> patchers = @.getEntities(classof XMLPatcher);
		for (int i=0; i<patchers.count(); i++)
		{
			XMLPatcher annotation = patchers.get(i);
			BasePatcher patcher = rtl::newInstance(annotation.name);
			Collection patcher_types = patcher.types();
			
			for (int j=0; j<patcher_types.count(); j++)
			{
				string patcher_type = patcher_types.get(j);
				this.patchers.set(patcher_type, patcher);
			}
		}
	}
	
	
	/**
	 * Returns pather by type
	 */
	BasePatcher getPatcher(string patcher_type)
	{
		if (not this.patchers.has(patcher_type))
		{
			return null;
		}
		return this.patchers.get(patcher_type);
	}
}