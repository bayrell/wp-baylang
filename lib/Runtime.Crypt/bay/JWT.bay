/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Crypt;

use Runtime.rs;
use Runtime.Crypt.HASH;
use Runtime.Crypt.RSA;


class JWT
{
	
	/**
	 * Returns method
	 */
	pure string getMethod(string algo)
	{
		if (algo == 'HS256') return "hash";
		if (algo == 'HS384') return "hash";
		if (algo == 'HS512') return "hash";
		if (algo == 'RS256') return "rsa";
		if (algo == 'RS384') return "rsa";
		if (algo == 'RS512') return "rsa";
		return "";
	}
	
	
	/**
	 * Returns method
	 */
	pure string getAlgo(string algo)
	{
		if (algo == 'HS256') return "SHA256";
		if (algo == 'HS384') return "SHA384";
		if (algo == 'HS512') return "SHA512";
		if (algo == 'RS256') return "SHA256";
		if (algo == 'RS384') return "SHA384";
		if (algo == 'RS512') return "SHA512";
		return "";
	}
	
	
	/**
	 * Create jwt sign
	 */
	pure string createSign(string head_b64, string data_b64, string key, string algo)
	{
		string m = static::getMethod(algo);
		string a = static::getAlgo(algo);
		string text = head_b64 ~ '.' ~ data_b64;
		string sign = "";
		if (m == "rsa") sign = RSA::sign(text, key, a);
		else if (m == "hash") sign = HASH::hash(text, key, a);
		sign = rs::base64_encode_url(sign);
		return sign;
	}
	
	
	/**
	 * Validate jwt sign
	 */
	pure bool validateSign(string head_b64, string data_b64, string sign, string key, string algo)
	{
		string m = static::getMethod(algo);
		string a = static::getAlgo(algo);
		string text = head_b64 ~ '.' ~ data_b64;
		bool flag = false;
		sign = rs::base64_decode_url(sign);
		if (m == "rsa") flag = RSA::verify(text, sign, key, a);
		else if (m == "hash") flag = HASH::verify(text, sign, key, a);
		return flag;
	}
	
	
	/**
	 * Create jwt
	 */
	pure string encode(Dict d, string key, string algo)
	{
		string data_json = rtl::json_encode(d);
		string data_b64 = rs::base64_encode_url(data_json);
		string head_b64 = rs::base64_encode_url(rtl::json_encode({'alg':algo,'typ':'JWT'}));
		string sign = static::createSign(head_b64, data_b64, key, algo);
		return head_b64 ~ '.' ~ data_b64 ~ '.' ~ sign;
	}
	
	
	/**
	 * Decode jwt
	 */
	pure Dict decode(string token_str, string key, string algo = "")
	{
		Collection arr = rs::split(".", token_str);
		string head_b64 = arr.get(0, "");
		string data_b64 = arr.get(1, "");
		string sign = arr.get(2, "");
		
		/* Decode head */
		string head_json = rs::base64_decode(head_b64);
		Dict head_data = rtl::json_decode(head_json);
		if (head_data == null)
			return
			{
				"head": null,
				"data": null,
				"valid": false,
			};
		
		/* Decode data */
		string data_json = rs::base64_decode(data_b64);
		Dict data = rtl::json_decode(data_json);
		if (data == null)
			return
			{
				"head": null,
				"data": null,
				"valid": false,
			};
		
		/* Check algo */
		string token_algo = head_data.get("alg","");
		if (token_algo == "") return null;
		if (algo != "")
		{
			if (token_algo != algo)
			{
				return
				{
					"head": head_data,
					"data": data,
					"valid": false,
				};
			}
		}
		
		/* Validate sign */
		bool flag = static::validateSign(head_b64, data_b64, sign, key, token_algo);
		if (not flag)
			return
			{
				"head": head_data,
				"data": data,
				"valid": false,
			};
		
		return
		{
			"head": head_data,
			"data": data,
			"valid": true,
		};
	}
	
}