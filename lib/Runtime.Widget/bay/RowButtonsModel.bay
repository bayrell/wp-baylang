/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget;

use Runtime.Callback;
use Runtime.Web.BaseModel;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.RenderListModel;
use Runtime.Widget.RowButtons;


class RowButtonsModel extends RenderListModel
{
	Collection buttons = [];
	Collection<string> styles = [];
	string component = classof RowButtons;
	
	
	/**
	 * Init widget params
	 */
	void initParams(Dict params)
	{
		parent(params);
		
		if (params == null) return;
		if (params.has("styles")) this.styles = params.get("styles");
	}
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Setup buttons */
		if (params.has("buttons"))
		{
			this.buttons = [];
			this.addButtons(params.get("buttons"));
		}
	}
	
	
	/**
	 * Add button
	 */
	ButtonModel addButton(Map button)
	{
		/* Create button model */
		ButtonModel model = this.createModel(button, classof ButtonModel);
		
		/* Settings */
		string dest = "";
		string kind = "after";
		if (button instanceof Dict)
		{
			dest = button.get("dest", "");
			kind = button.get("kind", "after");
		}
		
		/* Add button */
		this.addItem(model, dest, kind);
		
		/* Add listener */
		model.addListener("click", new Callback(this, "onButtonClick"));
		
		/* Return model */
		return model;
	}
	
	
	/**
	 * Add buttons
	 */
	void addButtons(Collection buttons)
	{
		for (int i=0; i<buttons.count(); i++)
		{
			this.addButton(buttons.get(i));
		}
	}
	
	
	/**
	 * Buttons click
	 */
	void onButtonClick(ClickMessage message)
	{
		this.emit(message);
	}
}
