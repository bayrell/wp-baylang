/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget;

use Runtime.BaseObject;
use Runtime.Serializer;
use Runtime.Entity.Factory;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.SelectWrap;
use Runtime.Widget.WidgetResultModel;
use Runtime.Widget.Table.TableStorageInterface;


class SelectModel extends BaseModel
{
	string component = classof SelectWrap;
	Collection<Dict> items = [];
	Dict foreign_key = null;
	TableStorageInterface storage = null;
	WidgetResultModel result = null;
	fn filter = null;
	fn transform = null;
	int page = 0;
	int limit = -1;
	
	
	/**
	 * Init widget params
	 */
	void initParams(Dict params)
	{
		parent(params);
		
		if (params == null) return;
		if (params.has("filter")) this.filter = params.get("filter");
		if (params.has("foreign_key")) this.foreign_key = params.get("foreign_key");
		if (params.has("transform")) this.transform = params.get("transform");
		
		/* Setup storage */
		if (params.has("storage"))
		{
			this.storage = this.createModel(params.get("storage"));
		}
		if (this.storage != null)
		{
			this.storage.setTable(this);
		}
	}
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Result */
		this.result = this.addWidget(
			classof WidgetResultModel,
			{
				"widget_name": "result",
			}
		);
	}
	
	
	/**
	 * Process frontend data
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "items", data);
		serializer.process(this, "result", data);
		parent(serializer, data);
	}
	
	
	/**
	 * Set api result
	 */
	void setApiResult(ApiResult res, string action)
	{
		if (res == null) return;
		
		/* Set items */
		if (res.data.has("items"))
		{
			this.items = res.data.get("items");
			if (this.transform) this.items = this.items.map( this.transform );
		}
		
		/* Set result */
		this.result.setApiResult(res);
	}
	
	
	/**
	 * Merge post data
	 */
	Dict mergePostData(Dict post_data, string action)
	{
		if (this.foreign_key)
		{
			post_data.set("foreign_key", this.foreign_key);
		}
		return post_data;
	}
	
	
	/**
	 * Load table data
	 */
	async void loadData(RenderContainer container)
	{
		await parent(container);
		
		ApiResult res = await this.storage.load();
		this.setApiResult(res, "load");
	}
	
	
	/**
	 * Returns options
	 */
	Dict getOptions() => this.filter ? this.items.filter(this.filter) : this.items;
	
	
	/**
	 * Returns props
	 */
	Dict getProps(Dict data)
	{
		Dict result = {
			"options": this.getOptions(),
		};
		
		return result;
	}
}