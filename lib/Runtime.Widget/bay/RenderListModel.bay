/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget;

use Runtime.lib;
use Runtime.Serializer;
use Runtime.Web.BaseModel;
use Runtime.Widget.RenderList;


class RenderListModel extends BaseModel
{
	string widget_name = "render_list";
	string component = classof RenderList;
	Vector<BaseModel> items = [];
	
	
	/**
	 * Find widget position
	 */
	int find(BaseModel widget) =>
		widget ? this.items.find(lib::equal(widget)) : -1
	;
	
	
	/**
	 * Find widget position by name
	 */
	int findByName(string widget_name) =>
		this.items.find(lib::equalAttr("widget_name", widget_name))
	;
	
	
	/**
	 * Find widget position by name
	 */
	BaseModel findItemByName(string widget_name) =>
		this.items.findItem(lib::equalAttr("widget_name", widget_name))
	;
	
	
	/**
	 * Add item
	 */
	BaseModel addItem(BaseModel widget, string dest = "", string kind = "after")
	{
		int pos = -1;
		if (dest != "")
		{
			pos = this.findByName(dest);
		}
		if (pos >= 0)
		{
			if (kind == "before") this.items.insert(pos, widget);
			else this.items.insert(pos + 1, widget);
		}
		else
		{
			if (kind == "before") this.items.prepend(widget);
			else this.items.push(widget);
		}
		return widget;
	}
	
	
	/**
	 * Remove item
	 */
	void removeItem(BaseModel widget)
	{
		int pos = this.find(widget);
		this.items.remove(pos);
	}
	
	
	/**
	 * Remove item
	 */
	void removeItemByName(string widget_name)
	{
		int pos = this.findByName(widget_name);
		this.items.remove(pos);
	}
	
	
	/**
	 * Returns button by index
	 */
	BaseModel get(int index) => this.items.get(index);
	
	
	/**
	 * Returns items count
	 */
	int count() => this.items.count();
}
