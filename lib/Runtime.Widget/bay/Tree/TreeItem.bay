/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Tree;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.SerializeInterface;
use Runtime.Serializer;
use Runtime.Widget.Tree.TreeModel;


class TreeItem extends BaseObject implements SerializeInterface
{
	string key = "";
	string label = "";
	bool open = true;
	Vector<TreeItem> items = [];
	
	
	/**
	 * Constructor
	 */
	public void constructor(Dict params = null)
	{
		parent();
		this._assign_values(params);
	}
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "key", data);
		serializer.process(this, "label", data);
		serializer.process(this, "items", data);
	}
	
	
	/**
	 * Returns true if can insert inside
	 */
	bool canDragInside() => true;
	
	
	/**
	 * Get item
	 */
	TreeItem get(Collection<int> path)
	{
		if (path == null) return null;
		if (path.count() == 0) return this;
		int pos = path.first();
		TreeItem new_item = this.items.get(pos);
		if (new_item == null) return null;
		return new_item.get(path.slice(1));
	}
	
	
	/**
	 * Find item position
	 */
	int find(TreeItem item) =>
		item ? this.items.find(lib::equal(item)) : -1
	;
	
	
	/**
	 * Context menu click
	 */
	void onContextMenu(TreeModel model)
	{
	}
	
	
	/**
	 * Click
	 */
	void onClick(TreeModel model)
	{
	}
	
	
	/**
	 * Select item
	 */
	void onSelect(TreeModel model)
	{
	}
}