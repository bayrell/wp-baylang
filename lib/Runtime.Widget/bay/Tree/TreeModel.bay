/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Tree;

use Runtime.BaseObject;
use Runtime.Reference;
use Runtime.Serializer;
use Runtime.Web.BaseModel;
use Runtime.Web.Events;
use Runtime.Widget.ContextMenu.ContextMenuModel;
use Runtime.Widget.Tree.TreeItem;
use Runtime.Widget.Tree.TreeMessage;
use Runtime.Widget.Tree.TreeWidget;


class TreeModel extends BaseModel
{
	string component = classof TreeWidget;
	string widget_name = "tree";
	bool autoselect = true;
	bool dnd = false;
	bool icons = true;
	bool is_open = false;
	bool render_context_menu = true;
	ContextMenuModel context_menu = null;
	Collection<int> selected_path = null;
	TreeItem selected_item = null;
	TreeItem root = null;
	
	
	/**
	 * Init widget params
	 */
	void initParams(Dict params)
	{
		parent(params);
		
		if (params == null) return;
		if (params.has("autoselect")) this.autoselect = params.get("autoselect");
		if (params.has("dnd")) this.dnd = params.get("dnd");
		if (params.has("icons")) this.icons = params.get("icons");
	}
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Setup context menu */
		if (params.has("context_menu"))
		{
			this.setContextMenu(params.get("context_menu"));
		}
	}
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "root", data);
		parent(serializer, data);
	}
	
	
	/**
	 * Set context menu
	 */
	void setContextMenu(ContextMenuModel context_menu)
	{
		this.render_context_menu = true;
		if (context_menu instanceof Dict)
		{
			this.context_menu = this.addWidget(
				classof ContextMenuModel,
				context_menu
			);
		}
		else
		{
			this.context_menu = this.createModel(context_menu);
			if (context_menu instanceof BaseModel)
			{
				this.render_context_menu = false;
			}
		}
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(Collection<int> path)
	{
		TreeItem item = path ? this.root.get(path) : null;
		if (this.selected_item == item) return;
		
		this.selected_path = path;
		this.selected_item = item;
		if (this.selected_item)
		{
			this.selected_item.onSelect();
		}
	}
	
	
	/**
	 * Can drag & drop
	 */
	bool canDrag(Collection<string> src, Collection<string> dest, string kind)
	{
		TreeMessage message = new TreeMessage{
			"name": "canDrag",
			"src": src,
			"dest": dest,
			"src_item": this.root.get(src),
			"dest_item": this.root.get(dest),
			"kind": kind,
			"result": true,
		};
		this.emit(message);
		return message.result;
	}
	
	
	/**
	 * Drag & Drop
	 */
	void dragElement(Collection<string> src, Collection<string> dest, string kind)
	{
		if (dest.count() == 0) dest = [this.root.items.count() - 1];
		if (not this.canDrag(src, dest, kind)) return;
		
		/* Move item */
		TreeItem src_item = this.root.get(src);
		TreeItem dest_item = this.root.get(dest);
		if (not src_item) return;
		if (not dest_item) return;

		/* Get parent items */
		Collection<int> src_parent_path = src.slice(0, -1);
		Collection<int> dest_parent_path = (kind != "into")
			? dest.slice(0, -1)
			: dest
		;
		TreeItem src_parent_item = this.root.get(src_parent_path);
		TreeItem dest_parent_item = this.root.get(dest_parent_path);
		
		/* Move item */
		src_parent_item.items.removeItem(src_item);
		if (kind == "into") dest_parent_item.items.addItem(src_item, null, "before");
		else dest_parent_item.items.addItem(src_item, dest_item, kind);
		
		/* Update dest path */
		Vector new_dest_parent_path = dest_parent_path.slice();
		if (src.count() <= new_dest_parent_path.count())
		{
			int pos = src.count() - 1;
			if (src.get(pos) < new_dest_parent_path.get(pos))
			{
				new_dest_parent_path.set(pos, new_dest_parent_path.get(pos) - 1);
			}
		}
		
		/* Create src new path */
		int pos = dest_parent_item.find(src_item);
		Collection<int> new_src_path = new_dest_parent_path.pushIm(pos);
		
		/* Send drag & drop event */
		this.emit(new TreeMessage{
			"name": "dragElement",
			"dest_item": dest_item,
			"dest_parent_item": dest_parent_item,
			"kind": kind,
			"src_item": src_item,
			"src_parent_item": src_parent_item,
			"new_src_path": new_src_path,
		});
	}
}
