/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget;

use Runtime.BaseObject;
use Runtime.Serializer;
use Runtime.Web.BaseModel;
use Runtime.Web.Messages.ClickMessage;
use Runtime.Widget.ButtonWrap;


class ButtonModel extends BaseModel
{
	Collection<string> styles = [];
	string component = classof ButtonWrap;
	string content = null;
	string target = "_self";
	var href = null;
	
	
	/**
	 * Init widget params
	 */
	void initParams(Dict params)
	{
		parent(params);
		
		if (params == null) return;
		if (params.has("content")) this.content = params.get("content");
		if (params.has("styles")) this.styles = params.get("styles");
		if (params.has("href")) this.href = params.get("href");
	}
	
	
	/**
	 * Returns content
	 */
	string getContent() => this.content;
	
	
	/**
	 * On click
	 */
	void onClick(var data = null)
	{
		this.emit(new ClickMessage{ "data": data });
	}
	
	
	/**
	 * Returns props
	 */
	Dict getProps(Dict data)
	{
		Dict result = {
			"content": this.content,
			"styles": this.styles,
			"target": this.target,
		};
		
		/* Add href */
		if (this.href)
		{
			if (rtl::isCallable(this.href)) result.set("href", rtl::apply(this.href, [data]));
			else result.set("href", this.href);
		}
		
		return result;
	}
}
