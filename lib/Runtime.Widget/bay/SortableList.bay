<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.SortableList">

<use name="Runtime.lib" />
<use name="Runtime.Math" />
<use name="Runtime.Web.Messages.ValueChangeMessage" />
<use name="Runtime.Widget.Button" component="true" />
<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.Select" component="true" />


<style>
.widget_sortable_list{
	position: relative;
}
.widget_sortable_list__item{
	display: flex;
	align-items: center;
	justify-content: flex-start;
	border-width: var(--widget-border-width);
	border-color: var(--widget-color-border);
	border-style: solid;
	border-radius: 4px;
	margin: 5px;
}
.widget_sortable_list__item_drag,
.widget_sortable_list__item_remove{
	cursor: pointer;
	padding: 0px 5px;
}
.widget_sortable_list__item_value{
	flex: 1;
	%(Input)widget_input{
		padding: 0px 10px;
		border-color: transparent;
		border-radius: 0;
		border-width: 0;
	}
}
.widget_sortable_list__buttons{
	text-align: center;
	margin-top: var(--widget-space);
}
.widget_sortable_list__shadow_elem{
	position: absolute;
	opacity: 0.5;
	user-select: none;
	z-index: 9999999;
	.widget_sortable_list__item{
		margin: 0;
	}
}
.widget_sortable_list__animation-move,
.widget_sortable_list__animation-enter-active,
.widget_sortable_list__animation-leave-active {
	transition: all 0.3s ease;
}
.widget_sortable_list__animation-enter-from,
.widget_sortable_list__animation-leave-to {
	opacity: 0;
}
</style>


<template name="renderValue" args="int pos, string item">
	<Input value={{ item }}
		@key={{ item }}
		@event:valueChange={{
			void (ValueChangeMessage message) use (pos)
			{
				this.value.set(pos, message.value);
				this.onValueChange();
			}
		}}
	/>
</template>


<template name="renderItem" args="int pos">
	 %set string item = this.value.get(pos);
	<div class="widget_sortable_list__item"
		data-pos={{ pos }}
		@key={{ item }}
	>
		<div class="widget_sortable_list__item_drag"
			@event:mousedown={{
				void (var e) use (item){ this.onMouseDown(e, item); }
			}}
		>@raw{{ "&#9776;" }}</div>
		<div class="widget_sortable_list__item_value">
			%render this.renderValue(pos, item);
		</div>
		<div class="widget_sortable_list__item_remove"
			@event:click={{
				void (var e) use (pos){ this.removeItem(pos); }
			}}
		>@raw{{ "&#10005;" }}</div>
	</div>
</template>


<template name="renderItems">
	<div class="widget_sortable_list__items">
		%if (this.value)
		{
			%for (int i=0; i<this.value.count(); i++)
			{
				%render this.renderItem(i);
			}
		}
	</div>
</template>


<template name="renderButtons">
	%if (this.show_buttons == "true")
	{
		<div class="widget_sortable_list__buttons">
			<Button styles=["small"] @event:click={{ this.onAddItemClick }}>Add</Button>
		</div>
	}
</template>


<template>
	<div class="widget_sortable_list">
		%render this.renderItems();
		%render this.renderButtons();
		<div class="widget_sortable_list__shadow" @ref="shadow"></div>
	</div>
</template>


<script>

props string show_buttons = "true";
props string name = "";
props Collection<string> value = [];
Collection old_value = [];

/* Drag & Drop */
bool is_drag = false;
bool is_transition = false;
var drag_elem = null;
var drag_item = null;
int drag_item_pos = -1;
var shadow_elem = null;
Dict drag_elem_css = null;
Dict drag_start_point = null;
int duration = 300;


/**
 * Swap items
 */
void swapItems(int a, int b)
{
	if (a > b)
	{
		int c = a;
		a = b;
		b = c;
	}
	var obj_a = this.value.get(a);
	var obj_b = this.value.get(b);
	this.value.remove(b);
	this.value.insert(b, obj_a);
	this.value.remove(a);
	this.value.insert(a, obj_b);
}


/**
 * Remove item
 */
void removeItem(int pos)
{
	this.old_value = this.value.slice();
	this.value.remove(pos);
	this.onValueChange();
}


/**
 * Returns drag & drop element from point
 */
void getDragElementFromPoint(int x, int y)
{
	var items = document.elementsFromPoint(x, y);
	for (int i=0; i<items.length; i++)
	{
		var elem = items[i];
		if (elem.parentElement == this.shadow_elem) continue;
		if (elem.classList.contains("widget_sortable_list__item")) return elem;
	}
	return null;
}


/**
 * Returns drag & drop element
 */
void getDragElement(var elem)
{
	if (elem.classList.contains("widget_sortable_list__item")) return elem;
	if (elem.parentElement.classList.contains("widget_sortable_list__item")) return elem.parentElement;
	return null;
}


/**
 * Create shadow elem
 */
void createShadow()
{
	if (not this.drag_elem) return;
	this.shadow_elem = document.createElement("div");
	this.shadow_elem.innerHTML = this.drag_elem.outerHTML;
	this.shadow_elem.classList.add("widget_sortable_list__shadow_elem");
	string arr = rs::split(" ", static::getCssHash(static::getClassName()));
	arr = arr.filter(lib::equalNot(""));
	for (int i=0; i<arr.count(); i++)
	{
		this.shadow_elem.classList.add(arr.get(i));
	}
	this.shadow_elem.style.height = this.drag_elem.offsetHeight ~ "px";
	this.shadow_elem.style.width = this.drag_elem.offsetWidth ~ "px";
	this.getRef("shadow").appendChild(this.shadow_elem);
}


/**
 * Move shadow element
 */
void moveShadow(double x, double y)
{
	if (not this.shadow_elem) return;
	double left = x - this.drag_start_point.get("shift_x");
	double top = y - this.drag_start_point.get("shift_y");
	this.shadow_elem.style.left = left ~ "px";
	this.shadow_elem.style.top = top ~ "px";
}


/**
 * Start Drag & Drop
 */
void startDrag(var e)
{
	if (this.is_drag != false) return false;
	if (this.drag_start_point == null) return false;
	
	/* Check move */
	double move_x = Math::abs(e.pageX - this.drag_start_point.get("x"));
	double move_y = Math::abs(e.pageY - this.drag_start_point.get("y"));
	if (move_x < 10 and move_y < 10) return false;
	
	/* Start drag */
	this.is_drag = true;
	this.createShadow();
	
	return true;
}


/**
 * Stop drag & drop
 */
void stopDrag()
{
	if (not this.is_drag) return;
	
	this.is_drag = false;
	this.is_transition = false;
	this.drag_elem = null;
	this.drag_start_point = null;
	this.shadow_elem.remove();
	this.shadow_elem = null;
}


/**
 * Move drag & drop
 */
void moveDrag(var e)
{
	if (not this.is_drag) return;
	
	this.moveShadow(e.pageX, e.pageY);
	if (this.is_transition) return;
	
	var elem = this.getDragElementFromPoint(e.pageX, e.pageY);
	if (not elem) return;
	
	int pos = elem.getAttribute("data-pos");
	if (pos == this.drag_item_pos) return;
	
	/* Swap items with animation */
	this.is_transition = true;
	this.old_value = this.value.slice();
	this.swapItems(this.drag_item_pos, pos);
	this.drag_item_pos = pos;
	
	/* Stop animation */
	window.setTimeout(void (){ this.is_transition = false }, this.duration);
	
	/* Send value change */
	this.onValueChange();
}


/**
 * On value change
 */
void onValueChange()
{
	this.emit("valueChange", new ValueChangeMessage{
		"value": this.value,
		"old_value": this.old_value,
		"data": this.data,
	});
}


/**
 * Add item click
 */
void onAddItemClick()
{
	this.old_value = this.value.slice();
	this.value.push("");
	this.onValueChange();
}


/**
 * Mouse down
 */
void onMouseDown(var e, var item)
{
	if (e.button != 0) return;
	if (this.is_drag) return;
	
	/* Set start drag item */
	this.drag_elem = this.getDragElement(e.target);
	this.drag_item = item;
	this.drag_item_pos = this.drag_elem.getAttribute("data-pos");
	this.drag_start_point = {
		"x": e.pageX,
		"y": e.pageY,
		"shift_x": e.pageX - e.target.offsetLeft,
		"shift_y": e.pageY - e.target.offsetTop,
	};
	
	/* Add event listener */
	document.addEventListener("mouseup", this.onMouseUp);
	document.addEventListener("mousemove", this.onMouseMove);
	
	e.preventDefault();
	return false;
}


/**
 * Mouse tree up
 */
void onMouseUp(var e)
{
	/* Remove event listener */
	document.removeEventListener("mouseup", this.onMouseUp);
	document.removeEventListener("mousemove", this.onMouseMove);
	
	/* Stop drag & drop */
	this.stopDrag();
}


/**
 * Mouse move
 */
void onMouseMove(var e)
{
	if (this.drag_elem == null) return;
	
	/* Try to start drag & drop */
	if (not this.is_drag) this.startDrag(e);
	if (not this.is_drag) return;
	
	/* Move Drag & Drop */
	this.moveDrag(e);
}

</script>


</class>