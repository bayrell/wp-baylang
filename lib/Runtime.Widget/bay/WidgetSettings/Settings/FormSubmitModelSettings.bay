/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.WidgetSettings.Settings;

use Runtime.BaseObject;
use Runtime.Web.BaseModel;
use Runtime.Web.RenderContainer;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterDictModel;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterFactoryModel;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterModel;
use BayLang.Constructor.WidgetPage.ParameterFactory;
use BayLang.Constructor.WidgetPage.WidgetSettingsInterface;


class FormSubmitModelSettings extends BaseObject implements WidgetSettingsInterface
{
	/**
	 * Returns widget name
	 */
	string getWidgetName() => "Form Model";
	
	
	/**
	 * Returns alias name
	 */
	string getAliasName() => "FormSubmitModel";
	
	
	/**
	 * Returns component name
	 */
	string getComponentName() => "";
	
	
	/**
	 * Returns model name
	 */
	string getModelName() => "Runtime.Widget.Form.FormSubmitModel";
	
	
	/**
	 * Returns selector name
	 */
	string getSelectorName() => "";
	
	
	/**
	 * Returns group name
	 */
	string getGroupName() => "widget";
	
	
	/**
	 * Returns true if model
	 */
	bool isModel() => true;
	
	
	/**
	 * Returns true if is widget settings
	 */
	bool checkWidget(var widget)
	{
		if (not widget.isComponent()) return false;
		if (widget.model_class_name != this.getModelName()) return false;
		return true;
	}
	
	
	/**
	 * Can insert widget
	 */
	bool canInsert(WidgetSettingsInterface widget)
	{
		return false;
	}
	
	
	/**
	 * Returns params
	 */
	Collection<ParameterFactory> getParams() =>
	[
		new ParameterFactory
		(
			classof ParameterFactoryModel,
			{
				"name": "storage",
				"path": "api_name",
				"label": "API name",
				"component": "Runtime.Widget.Input",
			}
		),
		new ParameterFactory
		(
			classof ParameterDictModel,
			{
				"name": "submit_button_text",
				"path": ["submit_button", "text"],
				"label": "Button text",
				"component": "Runtime.Widget.Input",
			}
		),
		new ParameterFactory
		(
			classof ParameterModel,
			{
				"name": "fields",
				"label": "Fields",
				"component": "BayLang.Constructor.Frontend.Components.SortableParams",
				"default":
				[
					{
						"name": "name",
						"label": "Username",
						"component": "Runtime.Widget.Input",
					},
				],
				"props":
				{
					"fields":
					[
						{
							"name": "name",
							"label": "Field name",
							"component": "Runtime.Widget.Input",
						},
						{
							"name": "label",
							"label": "Label",
							"component": "Runtime.Widget.Input",
						},
						{
							"name": "component",
							"label": "Component",
							"component": "Runtime.Widget.Input",
							"default": "Runtime.Widget.Input",
						},
					]
				},
			}
		),
	];
	
	
	/**
	 * On change
	 */
	bool onChange(var iframeWindow, BaseModel widget, ParameterModel param)
	{
		if (param.name == "submit_button_text")
		{
			var value = param.value;
			var submit_button = widget.bottom_buttons.getWidget("submit");
			submit_button.content = value;
			return true;
		}
		return false;
	}
	
	
	/**
	 * Returns default template
	 */
	Dict<fn> getDefaultTemplate() =>
	{
		"default": Dict () =>
		{
			"modules":
			[
				"Runtime.Entity.Factory",
			],
			"model": rs::join("\n", [
				"this.form = this.addWidget('Runtime.Widget.Form.FormSubmitModel', {",
				"\t'widget_name': 'form',",
				"\t'storage': new Factory(",
				"\t\t'Runtime.Widget.Form.FormSubmitStorage',",
				"\t\t{",
				"\t\t\t'api_name': 'test'",
				"\t\t}",
				"\t),",
				"\t'submit_button':",
				"\t{",
				"\t\t'text': 'Отправить заявку',",
				"\t},",
				"\t'fields': [",
				"\t\t{",
				"\t\t\t'name': 'name',",
				"\t\t\t'label': 'Name',",
				"\t\t\t'component': 'Runtime.Widget.Input',",
				"\t\t},",
				"\t\t{",
				"\t\t\t'name': 'email',",
				"\t\t\t'label': 'E-mail',",
				"\t\t\t'component': 'Runtime.Widget.Input',",
				"\t\t},",
				"\t],",
				"});",
			])
		}
	};
}