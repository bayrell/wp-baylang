/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.WidgetSettings.Settings;

use Runtime.BaseObject;
use Runtime.Web.RenderContainer;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterComponent;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterTagName;
use BayLang.Constructor.WidgetPage.ParameterFactory;
use BayLang.Constructor.WidgetPage.WidgetSettingsInterface;
use BayLang.OpCodes.BaseOpCode;


class ContainerSettings extends BaseObject implements WidgetSettingsInterface
{
	/**
	 * Returns widget name
	 */
	string getWidgetName() => "Container";
	
	
	/**
	 * Returns alias name
	 */
	string getAliasName() => "";
	
	
	/**
	 * Returns component name
	 */
	string getComponentName() => "div";
	
	
	/**
	 * Returns model name
	 */
	string getModelName() => "";
	
	
	/**
	 * Returns selector name
	 */
	string getSelectorName() => "container";
	
	
	/**
	 * Returns group name
	 */
	string getGroupName() => "basic";
	
	
	/**
	 * Returns true if model
	 */
	bool isModel() => false;
	
	
	/**
	 * Returns true if is widget settings
	 */
	bool checkWidget(var widget)
	{
		if (widget.code::getClassName() != "BayLang.OpCodes.OpHtmlTag") return false;
		if (rs::lower(widget.code.tag_name) != "div") return false;
		if (widget.code.items == null) return true;
		if (widget.code.items.items.count() == 0) return true;
		BaseOpCode item = widget.code.items.items.get(0);
		if (item::getClassName() == "BayLang.OpCodes.OpHtmlContent") return false;
		if (item::getClassName() == "BayLang.OpCodes.OpHtmlValue") return false;
		return true;
	}
	
	
	/**
	 * Can insert widget
	 */
	bool canInsert(var widget)
	{
		return true;
	}
	
	
	/**
	 * Returns params
	 */
	Collection<ParameterFactory> getParams() =>
	[
	];
	
	
	/**
	 * Returns default template
	 */
	Dict<fn> getDefaultTemplate() =>
	{
		"default": Dict () =>
		{
			"content": rs::join("\n", [
			])
		},
	};
}