/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.WidgetSettings.Settings;

use Runtime.BaseObject;
use Runtime.Web.RenderContainer;
use BayLang.Constructor.Frontend.Editor.Parameters.ParameterComponent;
use BayLang.Constructor.WidgetPage.ParameterFactory;
use BayLang.Constructor.WidgetPage.WidgetSettingsInterface;


class SectionSettings extends BaseObject implements WidgetSettingsInterface
{
	/**
	 * Returns widget name
	 */
	string getWidgetName() => "Section";
	
	
	/**
	 * Returns alias name
	 */
	string getAliasName() => "Section";
	
	
	/**
	 * Returns component name
	 */
	string getComponentName() => "Runtime.Widget.Section";
	
	
	/**
	 * Returns model name
	 */
	string getModelName() => "";
	
	
	/**
	 * Returns selector name
	 */
	string getSelectorName() => "section";
	
	
	/**
	 * Returns group name
	 */
	string getGroupName() => "basic";
	
	
	/**
	 * Returns true if model
	 */
	bool isModel() => false;
	
	
	/**
	 * Returns true if is widget settings
	 */
	bool checkWidget(var widget)
	{
		if (not widget.isComponent()) return false;
		if (widget.component_class_name != this.getComponentName()) return false;
		return true;
	}
	
	
	/**
	 * Can insert widget
	 */
	bool canInsert(WidgetSettingsInterface widget)
	{
		if (widget.getComponentName() == this.getComponentName()) return false;
		return true;
	}
	
	
	/**
	 * Returns params
	 */
	Collection<ParameterFactory> getParams() =>
	[
		new ParameterFactory
		(
			classof ParameterComponent,
			{
				"name": "wrap",
				"label": "Wrap",
				"component": "Runtime.Widget.Select",
				"props": {
					"show_select_value": false,
					"options": [
						{"key": "false", "value": "No"},
						{"key": "", "value": "Yes"},
					],
				}
			}
		),
		new ParameterFactory
		(
			classof ParameterComponent,
			{
				"name": "flex",
				"label": "Flex",
				"component": "Runtime.Widget.Select",
				"props": {
					"show_select_value": false,
					"options": [
						{"key": "", "value": "No"},
						{"key": "true", "value": "Yes"},
					],
				}
			}
		),
		new ParameterFactory
		(
			classof ParameterComponent,
			{
				"name": "align_items",
				"label": "Align items",
				"component": "Runtime.Widget.Select",
				"props": {
					"options": [
						{"key": "baseline", "value": "baseline"},
						{"key": "center", "value": "center"},
						{"key": "end", "value": "end"},
						{"key": "flex-end", "value": "flex-end"},
						{"key": "flex-start", "value": "flex-start"},
						{"key": "start", "value": "start"},
						{"key": "stretch", "value": "stretch"},
						{"key": "revert", "value": "revert"},
					],
				}
			}
		),
		new ParameterFactory
		(
			classof ParameterComponent,
			{
				"name": "justify_content",
				"label": "Justify content",
				"component": "Runtime.Widget.Select",
				"props": {
					"options": [
						{"key": "left", "value": "left"},
						{"key": "center", "value": "center"},
						{"key": "right", "value": "right"},
						{"key": "space-around", "value": "space-around"},
						{"key": "space-between", "value": "space-between"},
						{"key": "start", "value": "start"},
						{"key": "stretch", "value": "stretch"},
						{"key": "end", "value": "end"},
					],
				}
			}
		),
		new ParameterFactory
		(
			classof ParameterComponent,
			{
				"name": "flex_wrap",
				"label": "Flex wrap",
				"component": "Runtime.Widget.Select",
				"props": {
					"options": [
						{"key": "nowrap", "value": "nowrap"},
						{"key": "wrap", "value": "wrap"},
					],
				}
			}
		),
		new ParameterFactory
		(
			classof ParameterComponent,
			{
				"name": "min_height",
				"label": "min_height",
				"component": "Runtime.Widget.Input",
			}
		),
		new ParameterFactory
		(
			classof ParameterComponent,
			{
				"name": "height",
				"label": "height",
				"component": "Runtime.Widget.Input",
			}
		),
	];
	
	
	/**
	 * Returns default template
	 */
	Dict getDefaultTemplate() =>
	{
		"default": Dict () =>
		{
			"content": rs::join("\n", [
				"<style>",
				"padding-top: 20px;",
				"padding-bottom: 20px;",
				"background-position: center top;",
				"background-repeat: no-repeat;",
				"background-size: cover;",
				"</style>"
			])
		},
	};
}